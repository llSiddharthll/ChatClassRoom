[
  {
    "model": "admin.logentry",
    "pk": 1,
    "fields": {
      "action_time": "2024-09-01T16:13:05.977Z",
      "user": 1,
      "content_type": 7,
      "object_id": "2",
      "object_repr": "Data Science",
      "action_flag": 3,
      "change_message": ""
    }
  },
  {
    "model": "admin.logentry",
    "pk": 2,
    "fields": {
      "action_time": "2024-09-01T17:03:40.755Z",
      "user": 1,
      "content_type": 7,
      "object_id": "1",
      "object_repr": "Django",
      "action_flag": 3,
      "change_message": ""
    }
  },
  {
    "model": "admin.logentry",
    "pk": 3,
    "fields": {
      "action_time": "2024-09-01T18:24:50.496Z",
      "user": 1,
      "content_type": 7,
      "object_id": "4",
      "object_repr": "Web Design",
      "action_flag": 3,
      "change_message": ""
    }
  },
  {
    "model": "admin.logentry",
    "pk": 4,
    "fields": {
      "action_time": "2024-09-02T18:58:06.062Z",
      "user": 1,
      "content_type": 9,
      "object_id": "3",
      "object_repr": "­ƒôí Live Chat with Django Channels: A Fun Guide",
      "action_flag": 2,
      "change_message": "[{\"changed\": {\"fields\": [\"Content\"]}}]"
    }
  },
  {
    "model": "admin.logentry",
    "pk": 5,
    "fields": {
      "action_time": "2024-09-02T19:02:55.942Z",
      "user": 1,
      "content_type": 9,
      "object_id": "3",
      "object_repr": "­ƒôí Live Chat with Django Channels: A Fun Guide",
      "action_flag": 2,
      "change_message": "[{\"changed\": {\"fields\": [\"Content\"]}}]"
    }
  },
  {
    "model": "admin.logentry",
    "pk": 6,
    "fields": {
      "action_time": "2024-09-02T19:26:42.838Z",
      "user": 1,
      "content_type": 10,
      "object_id": "1",
      "object_repr": "# ­ƒôè Pandas Practice Questions\r\n\r\n## **Basic Operat",
      "action_flag": 1,
      "change_message": "[{\"added\": {}}]"
    }
  },
  {
    "model": "admin.logentry",
    "pk": 7,
    "fields": {
      "action_time": "2024-09-05T17:50:13.849Z",
      "user": 1,
      "content_type": 17,
      "object_id": "1",
      "object_repr": "Google",
      "action_flag": 1,
      "change_message": "[{\"added\": {}}]"
    }
  },
  {
    "model": "admin.logentry",
    "pk": 8,
    "fields": {
      "action_time": "2024-09-05T18:22:58.978Z",
      "user": 1,
      "content_type": 19,
      "object_id": "1",
      "object_repr": "12",
      "action_flag": 2,
      "change_message": "[{\"changed\": {\"fields\": [\"Domain name\"]}}]"
    }
  },
  {
    "model": "admin.logentry",
    "pk": 9,
    "fields": {
      "action_time": "2024-09-05T18:23:13.575Z",
      "user": 1,
      "content_type": 19,
      "object_id": "1",
      "object_repr": "127.0.0.1:8000",
      "action_flag": 2,
      "change_message": "[{\"changed\": {\"fields\": [\"Domain name\", \"Display name\"]}}]"
    }
  },
  {
    "model": "admin.logentry",
    "pk": 10,
    "fields": {
      "action_time": "2024-09-05T18:23:24.658Z",
      "user": 1,
      "content_type": 19,
      "object_id": "1",
      "object_repr": "127.0.0.1:8000",
      "action_flag": 2,
      "change_message": "[{\"changed\": {\"fields\": [\"Display name\"]}}]"
    }
  },
  {
    "model": "admin.logentry",
    "pk": 11,
    "fields": {
      "action_time": "2024-09-05T18:23:46.539Z",
      "user": 1,
      "content_type": 17,
      "object_id": "1",
      "object_repr": "Google",
      "action_flag": 1,
      "change_message": "[{\"added\": {}}]"
    }
  },
  {
    "model": "admin.logentry",
    "pk": 12,
    "fields": {
      "action_time": "2024-09-05T18:35:04.239Z",
      "user": 1,
      "content_type": 19,
      "object_id": "1",
      "object_repr": "http://127.0.0.1:8000",
      "action_flag": 2,
      "change_message": "[{\"changed\": {\"fields\": [\"Domain name\", \"Display name\"]}}]"
    }
  },
  {
    "model": "admin.logentry",
    "pk": 13,
    "fields": {
      "action_time": "2024-09-05T18:35:27.187Z",
      "user": 1,
      "content_type": 17,
      "object_id": "1",
      "object_repr": "Google",
      "action_flag": 2,
      "change_message": "[]"
    }
  },
  {
    "model": "admin.logentry",
    "pk": 14,
    "fields": {
      "action_time": "2024-09-06T19:22:14.564Z",
      "user": 1,
      "content_type": 19,
      "object_id": "1",
      "object_repr": "127.0.0.1:8000",
      "action_flag": 2,
      "change_message": "[{\"changed\": {\"fields\": [\"Domain name\", \"Display name\"]}}]"
    }
  },
  {
    "model": "admin.logentry",
    "pk": 15,
    "fields": {
      "action_time": "2024-09-09T18:11:34.183Z",
      "user": 1,
      "content_type": 19,
      "object_id": "1",
      "object_repr": "localhost",
      "action_flag": 2,
      "change_message": "[{\"changed\": {\"fields\": [\"Domain name\", \"Display name\"]}}]"
    }
  },
  {
    "model": "admin.logentry",
    "pk": 16,
    "fields": {
      "action_time": "2024-09-09T18:12:51.067Z",
      "user": 1,
      "content_type": 17,
      "object_id": "1",
      "object_repr": "Google",
      "action_flag": 2,
      "change_message": "[{\"changed\": {\"fields\": [\"Key\"]}}]"
    }
  },
  {
    "model": "admin.logentry",
    "pk": 17,
    "fields": {
      "action_time": "2024-09-10T20:37:08.853Z",
      "user": 1,
      "content_type": 17,
      "object_id": "2",
      "object_repr": "Github",
      "action_flag": 1,
      "change_message": "[{\"added\": {}}]"
    }
  },
  {
    "model": "admin.logentry",
    "pk": 18,
    "fields": {
      "action_time": "2024-09-17T17:58:44.543Z",
      "user": 1,
      "content_type": 4,
      "object_id": "2",
      "object_repr": "siddharth7",
      "action_flag": 2,
      "change_message": "[{\"changed\": {\"fields\": [\"Staff status\", \"Superuser status\"]}}]"
    }
  },
  {
    "model": "admin.logentry",
    "pk": 19,
    "fields": {
      "action_time": "2024-09-17T17:59:41.990Z",
      "user": 1,
      "content_type": 9,
      "object_id": "11",
      "object_repr": "jQuery AJAX",
      "action_flag": 2,
      "change_message": "[{\"changed\": {\"fields\": [\"Topics\"]}}]"
    }
  },
  {
    "model": "auth.permission",
    "pk": 1,
    "fields": {
      "name": "Can add log entry",
      "content_type": 1,
      "codename": "add_logentry"
    }
  },
  {
    "model": "auth.permission",
    "pk": 2,
    "fields": {
      "name": "Can change log entry",
      "content_type": 1,
      "codename": "change_logentry"
    }
  },
  {
    "model": "auth.permission",
    "pk": 3,
    "fields": {
      "name": "Can delete log entry",
      "content_type": 1,
      "codename": "delete_logentry"
    }
  },
  {
    "model": "auth.permission",
    "pk": 4,
    "fields": {
      "name": "Can view log entry",
      "content_type": 1,
      "codename": "view_logentry"
    }
  },
  {
    "model": "auth.permission",
    "pk": 5,
    "fields": {
      "name": "Can add permission",
      "content_type": 2,
      "codename": "add_permission"
    }
  },
  {
    "model": "auth.permission",
    "pk": 6,
    "fields": {
      "name": "Can change permission",
      "content_type": 2,
      "codename": "change_permission"
    }
  },
  {
    "model": "auth.permission",
    "pk": 7,
    "fields": {
      "name": "Can delete permission",
      "content_type": 2,
      "codename": "delete_permission"
    }
  },
  {
    "model": "auth.permission",
    "pk": 8,
    "fields": {
      "name": "Can view permission",
      "content_type": 2,
      "codename": "view_permission"
    }
  },
  {
    "model": "auth.permission",
    "pk": 9,
    "fields": {
      "name": "Can add group",
      "content_type": 3,
      "codename": "add_group"
    }
  },
  {
    "model": "auth.permission",
    "pk": 10,
    "fields": {
      "name": "Can change group",
      "content_type": 3,
      "codename": "change_group"
    }
  },
  {
    "model": "auth.permission",
    "pk": 11,
    "fields": {
      "name": "Can delete group",
      "content_type": 3,
      "codename": "delete_group"
    }
  },
  {
    "model": "auth.permission",
    "pk": 12,
    "fields": {
      "name": "Can view group",
      "content_type": 3,
      "codename": "view_group"
    }
  },
  {
    "model": "auth.permission",
    "pk": 13,
    "fields": {
      "name": "Can add user",
      "content_type": 4,
      "codename": "add_user"
    }
  },
  {
    "model": "auth.permission",
    "pk": 14,
    "fields": {
      "name": "Can change user",
      "content_type": 4,
      "codename": "change_user"
    }
  },
  {
    "model": "auth.permission",
    "pk": 15,
    "fields": {
      "name": "Can delete user",
      "content_type": 4,
      "codename": "delete_user"
    }
  },
  {
    "model": "auth.permission",
    "pk": 16,
    "fields": {
      "name": "Can view user",
      "content_type": 4,
      "codename": "view_user"
    }
  },
  {
    "model": "auth.permission",
    "pk": 17,
    "fields": {
      "name": "Can add content type",
      "content_type": 5,
      "codename": "add_contenttype"
    }
  },
  {
    "model": "auth.permission",
    "pk": 18,
    "fields": {
      "name": "Can change content type",
      "content_type": 5,
      "codename": "change_contenttype"
    }
  },
  {
    "model": "auth.permission",
    "pk": 19,
    "fields": {
      "name": "Can delete content type",
      "content_type": 5,
      "codename": "delete_contenttype"
    }
  },
  {
    "model": "auth.permission",
    "pk": 20,
    "fields": {
      "name": "Can view content type",
      "content_type": 5,
      "codename": "view_contenttype"
    }
  },
  {
    "model": "auth.permission",
    "pk": 21,
    "fields": {
      "name": "Can add session",
      "content_type": 6,
      "codename": "add_session"
    }
  },
  {
    "model": "auth.permission",
    "pk": 22,
    "fields": {
      "name": "Can change session",
      "content_type": 6,
      "codename": "change_session"
    }
  },
  {
    "model": "auth.permission",
    "pk": 23,
    "fields": {
      "name": "Can delete session",
      "content_type": 6,
      "codename": "delete_session"
    }
  },
  {
    "model": "auth.permission",
    "pk": 24,
    "fields": {
      "name": "Can view session",
      "content_type": 6,
      "codename": "view_session"
    }
  },
  {
    "model": "auth.permission",
    "pk": 25,
    "fields": {
      "name": "Can add subject",
      "content_type": 7,
      "codename": "add_subject"
    }
  },
  {
    "model": "auth.permission",
    "pk": 26,
    "fields": {
      "name": "Can change subject",
      "content_type": 7,
      "codename": "change_subject"
    }
  },
  {
    "model": "auth.permission",
    "pk": 27,
    "fields": {
      "name": "Can delete subject",
      "content_type": 7,
      "codename": "delete_subject"
    }
  },
  {
    "model": "auth.permission",
    "pk": 28,
    "fields": {
      "name": "Can view subject",
      "content_type": 7,
      "codename": "view_subject"
    }
  },
  {
    "model": "auth.permission",
    "pk": 29,
    "fields": {
      "name": "Can add chat message",
      "content_type": 8,
      "codename": "add_chatmessage"
    }
  },
  {
    "model": "auth.permission",
    "pk": 30,
    "fields": {
      "name": "Can change chat message",
      "content_type": 8,
      "codename": "change_chatmessage"
    }
  },
  {
    "model": "auth.permission",
    "pk": 31,
    "fields": {
      "name": "Can delete chat message",
      "content_type": 8,
      "codename": "delete_chatmessage"
    }
  },
  {
    "model": "auth.permission",
    "pk": 32,
    "fields": {
      "name": "Can view chat message",
      "content_type": 8,
      "codename": "view_chatmessage"
    }
  },
  {
    "model": "auth.permission",
    "pk": 33,
    "fields": {
      "name": "Can add note",
      "content_type": 9,
      "codename": "add_note"
    }
  },
  {
    "model": "auth.permission",
    "pk": 34,
    "fields": {
      "name": "Can change note",
      "content_type": 9,
      "codename": "change_note"
    }
  },
  {
    "model": "auth.permission",
    "pk": 35,
    "fields": {
      "name": "Can delete note",
      "content_type": 9,
      "codename": "delete_note"
    }
  },
  {
    "model": "auth.permission",
    "pk": 36,
    "fields": {
      "name": "Can view note",
      "content_type": 9,
      "codename": "view_note"
    }
  },
  {
    "model": "auth.permission",
    "pk": 37,
    "fields": {
      "name": "Can add question",
      "content_type": 10,
      "codename": "add_question"
    }
  },
  {
    "model": "auth.permission",
    "pk": 38,
    "fields": {
      "name": "Can change question",
      "content_type": 10,
      "codename": "change_question"
    }
  },
  {
    "model": "auth.permission",
    "pk": 39,
    "fields": {
      "name": "Can delete question",
      "content_type": 10,
      "codename": "delete_question"
    }
  },
  {
    "model": "auth.permission",
    "pk": 40,
    "fields": {
      "name": "Can view question",
      "content_type": 10,
      "codename": "view_question"
    }
  },
  {
    "model": "auth.permission",
    "pk": 41,
    "fields": {
      "name": "Can add comment",
      "content_type": 11,
      "codename": "add_comment"
    }
  },
  {
    "model": "auth.permission",
    "pk": 42,
    "fields": {
      "name": "Can change comment",
      "content_type": 11,
      "codename": "change_comment"
    }
  },
  {
    "model": "auth.permission",
    "pk": 43,
    "fields": {
      "name": "Can delete comment",
      "content_type": 11,
      "codename": "delete_comment"
    }
  },
  {
    "model": "auth.permission",
    "pk": 44,
    "fields": {
      "name": "Can view comment",
      "content_type": 11,
      "codename": "view_comment"
    }
  },
  {
    "model": "auth.permission",
    "pk": 45,
    "fields": {
      "name": "Can add topic",
      "content_type": 12,
      "codename": "add_topic"
    }
  },
  {
    "model": "auth.permission",
    "pk": 46,
    "fields": {
      "name": "Can change topic",
      "content_type": 12,
      "codename": "change_topic"
    }
  },
  {
    "model": "auth.permission",
    "pk": 47,
    "fields": {
      "name": "Can delete topic",
      "content_type": 12,
      "codename": "delete_topic"
    }
  },
  {
    "model": "auth.permission",
    "pk": 48,
    "fields": {
      "name": "Can view topic",
      "content_type": 12,
      "codename": "view_topic"
    }
  },
  {
    "model": "auth.permission",
    "pk": 49,
    "fields": {
      "name": "Can add user profile",
      "content_type": 13,
      "codename": "add_userprofile"
    }
  },
  {
    "model": "auth.permission",
    "pk": 50,
    "fields": {
      "name": "Can change user profile",
      "content_type": 13,
      "codename": "change_userprofile"
    }
  },
  {
    "model": "auth.permission",
    "pk": 51,
    "fields": {
      "name": "Can delete user profile",
      "content_type": 13,
      "codename": "delete_userprofile"
    }
  },
  {
    "model": "auth.permission",
    "pk": 52,
    "fields": {
      "name": "Can view user profile",
      "content_type": 13,
      "codename": "view_userprofile"
    }
  },
  {
    "model": "auth.permission",
    "pk": 53,
    "fields": {
      "name": "Can add email address",
      "content_type": 14,
      "codename": "add_emailaddress"
    }
  },
  {
    "model": "auth.permission",
    "pk": 54,
    "fields": {
      "name": "Can change email address",
      "content_type": 14,
      "codename": "change_emailaddress"
    }
  },
  {
    "model": "auth.permission",
    "pk": 55,
    "fields": {
      "name": "Can delete email address",
      "content_type": 14,
      "codename": "delete_emailaddress"
    }
  },
  {
    "model": "auth.permission",
    "pk": 56,
    "fields": {
      "name": "Can view email address",
      "content_type": 14,
      "codename": "view_emailaddress"
    }
  },
  {
    "model": "auth.permission",
    "pk": 57,
    "fields": {
      "name": "Can add email confirmation",
      "content_type": 15,
      "codename": "add_emailconfirmation"
    }
  },
  {
    "model": "auth.permission",
    "pk": 58,
    "fields": {
      "name": "Can change email confirmation",
      "content_type": 15,
      "codename": "change_emailconfirmation"
    }
  },
  {
    "model": "auth.permission",
    "pk": 59,
    "fields": {
      "name": "Can delete email confirmation",
      "content_type": 15,
      "codename": "delete_emailconfirmation"
    }
  },
  {
    "model": "auth.permission",
    "pk": 60,
    "fields": {
      "name": "Can view email confirmation",
      "content_type": 15,
      "codename": "view_emailconfirmation"
    }
  },
  {
    "model": "auth.permission",
    "pk": 61,
    "fields": {
      "name": "Can add social account",
      "content_type": 16,
      "codename": "add_socialaccount"
    }
  },
  {
    "model": "auth.permission",
    "pk": 62,
    "fields": {
      "name": "Can change social account",
      "content_type": 16,
      "codename": "change_socialaccount"
    }
  },
  {
    "model": "auth.permission",
    "pk": 63,
    "fields": {
      "name": "Can delete social account",
      "content_type": 16,
      "codename": "delete_socialaccount"
    }
  },
  {
    "model": "auth.permission",
    "pk": 64,
    "fields": {
      "name": "Can view social account",
      "content_type": 16,
      "codename": "view_socialaccount"
    }
  },
  {
    "model": "auth.permission",
    "pk": 65,
    "fields": {
      "name": "Can add social application",
      "content_type": 17,
      "codename": "add_socialapp"
    }
  },
  {
    "model": "auth.permission",
    "pk": 66,
    "fields": {
      "name": "Can change social application",
      "content_type": 17,
      "codename": "change_socialapp"
    }
  },
  {
    "model": "auth.permission",
    "pk": 67,
    "fields": {
      "name": "Can delete social application",
      "content_type": 17,
      "codename": "delete_socialapp"
    }
  },
  {
    "model": "auth.permission",
    "pk": 68,
    "fields": {
      "name": "Can view social application",
      "content_type": 17,
      "codename": "view_socialapp"
    }
  },
  {
    "model": "auth.permission",
    "pk": 69,
    "fields": {
      "name": "Can add social application token",
      "content_type": 18,
      "codename": "add_socialtoken"
    }
  },
  {
    "model": "auth.permission",
    "pk": 70,
    "fields": {
      "name": "Can change social application token",
      "content_type": 18,
      "codename": "change_socialtoken"
    }
  },
  {
    "model": "auth.permission",
    "pk": 71,
    "fields": {
      "name": "Can delete social application token",
      "content_type": 18,
      "codename": "delete_socialtoken"
    }
  },
  {
    "model": "auth.permission",
    "pk": 72,
    "fields": {
      "name": "Can view social application token",
      "content_type": 18,
      "codename": "view_socialtoken"
    }
  },
  {
    "model": "auth.permission",
    "pk": 73,
    "fields": {
      "name": "Can add site",
      "content_type": 19,
      "codename": "add_site"
    }
  },
  {
    "model": "auth.permission",
    "pk": 74,
    "fields": {
      "name": "Can change site",
      "content_type": 19,
      "codename": "change_site"
    }
  },
  {
    "model": "auth.permission",
    "pk": 75,
    "fields": {
      "name": "Can delete site",
      "content_type": 19,
      "codename": "delete_site"
    }
  },
  {
    "model": "auth.permission",
    "pk": 76,
    "fields": {
      "name": "Can view site",
      "content_type": 19,
      "codename": "view_site"
    }
  },
  {
    "model": "auth.user",
    "pk": 1,
    "fields": {
      "password": "pbkdf2_sha256$870000$1o1O0duVxV8C8ApLkoiZqV$KV5WuSKHWIy2TrOlSdxWQk9NJkKt0hKRrk9axp1Xdzs=",
      "last_login": "2024-09-17T17:56:57.858Z",
      "is_superuser": true,
      "username": "Siddharth",
      "first_name": "",
      "last_name": "",
      "email": "",
      "is_staff": true,
      "is_active": true,
      "date_joined": "2024-08-29T18:48:28.937Z",
      "groups": [],
      "user_permissions": []
    }
  },
  {
    "model": "auth.user",
    "pk": 2,
    "fields": {
      "password": "!bDmfzbTBH6UlZzWdtBCAeRMtdN2c6xw4TYooMuta",
      "last_login": "2024-09-23T04:32:11.735Z",
      "is_superuser": true,
      "username": "siddharth7",
      "first_name": "Siddharth",
      "last_name": "Tiwari",
      "email": "siddharthgreat443@gmail.com",
      "is_staff": true,
      "is_active": true,
      "date_joined": "2024-09-10T19:49:08Z",
      "groups": [],
      "user_permissions": []
    }
  },
  {
    "model": "auth.user",
    "pk": 3,
    "fields": {
      "password": "!kB9QCBkVpXRHoa4pOVL0RT6Z9MSHD4VVXzdFjwgI",
      "last_login": "2024-09-11T12:19:21.799Z",
      "is_superuser": false,
      "username": "daler",
      "first_name": "daler",
      "last_name": "jatt",
      "email": "dalerjatt5911@gmail.com",
      "is_staff": false,
      "is_active": true,
      "date_joined": "2024-09-11T12:19:17.892Z",
      "groups": [],
      "user_permissions": []
    }
  },
  {
    "model": "auth.user",
    "pk": 4,
    "fields": {
      "password": "!yYUXZpUBqp3lX2GORyRshdLVGcT3qRdm3CsV8VoW",
      "last_login": "2024-09-23T13:38:06.676Z",
      "is_superuser": false,
      "username": "abhishek",
      "first_name": "Abhishek",
      "last_name": "Bisht",
      "email": "abhishekbisht0203@gmail.com",
      "is_staff": false,
      "is_active": true,
      "date_joined": "2024-09-23T13:38:02.818Z",
      "groups": [],
      "user_permissions": []
    }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 1,
    "fields": { "app_label": "admin", "model": "logentry" }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 2,
    "fields": { "app_label": "auth", "model": "permission" }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 3,
    "fields": { "app_label": "auth", "model": "group" }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 4,
    "fields": { "app_label": "auth", "model": "user" }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 5,
    "fields": { "app_label": "contenttypes", "model": "contenttype" }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 6,
    "fields": { "app_label": "sessions", "model": "session" }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 7,
    "fields": { "app_label": "main", "model": "subject" }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 8,
    "fields": { "app_label": "main", "model": "chatmessage" }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 9,
    "fields": { "app_label": "main", "model": "note" }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 10,
    "fields": { "app_label": "main", "model": "question" }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 11,
    "fields": { "app_label": "main", "model": "comment" }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 12,
    "fields": { "app_label": "main", "model": "topic" }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 13,
    "fields": { "app_label": "main", "model": "userprofile" }
  },
  {
    "model": "sessions.session",
    "pk": "05ulyu45ofdd2zq50961ojgzlsbt5lar",
    "fields": {
      "session_data": ".eJxVT8tOhTAQ_ZdZE9J3Czv9DWPI0I6XRqSGFjfk_rsFccHu5LzmzA45-Ygzep-2pQy5YKEM_f5s4J_DrUy0lOixxLQMX1SmFKrnbYc_DP29BWq2QM-tsMzoTrJWcaOsUw18r-knBlpr5JHSY6bq3eLRwLlTTFqmOtMJXYHlWsPzvYFzwLBlWofTKeDGjeg_aTkEnOeDbq8Z7em55Ny-3N54vVK3qgnzdBwwnHdOahGIcWO14cYE1DLw0TlOo_1w5JkUwkipAgkMxlFAYswbNVJd_Qut8W_R:1ssak7:tHYP2IMRQN7cRA9BJI_OeMwThptaF483uU6EKTvSA60",
      "expire_date": "2024-10-07T04:32:11.928Z"
    }
  },
  {
    "model": "sessions.session",
    "pk": "3vykcr3o1xsvfiagvyxk5hghu8bw6bcq",
    "fields": {
      "session_data": ".eJxVjMEOgyAQRP9lz8YooKK39kfIuqyRlGIi0Ivx36uNPXicNzNvg7iQQ49ESw7JxISJIwzbXsCffXh1k2Nr-I3OwxCy9wUYzGk2OfJqnIUBFNzYiPTicBbo_YnLS1f-Nlcdy8eROCRHmNwSntfrppoxzoeHVWcliZ6VGEnVQmvbyJGl6Eg2aFWrkLDGsZqUnLTQbSW0rRibuq-lbhvYv0jwUT4:1ssjGR:aPvyyzBfdAY231Rzxe9xX8I134dABUHTZk3WyjzOMwU",
      "expire_date": "2024-10-07T13:38:07.080Z"
    }
  },
  {
    "model": "sessions.session",
    "pk": "43gquxhfcsgae6crxx5jdm3sra6ia8gu",
    "fields": {
      "session_data": ".eJxVjctugzAQRf9l1gjZxJjHrtlnFambqrKG8VAsHBNh00UR_17SkkWWc8-dc1eIEzn0SDQtIZmYMHGEdoV04SvexPviTtfx9HOG9mOF-zwRx52Dn75cgAwsJoQ2LN5ncB-JDU2WzTfPrnc8_5Mtk1WhRVlJpXPVCKmb8nPL4Dl6tK3hGzr_tBlc0mCWyLNxdl88wUvWIY0cHgC9f8T5ocv_OgeO-dt-cUiOMLkpnI-vF9WAcdg9rHpZY6drrnXTaUQhmdlaKlRTUtdgIavKVlZxxcpKLXorukZZQX3HVBBsvy8sck4:1soMJe:5vO6VKhJwN0HcxPPvZp_xzvbZ51xWj_H5OpFCN9021k",
      "expire_date": "2024-09-25T12:19:22.289Z"
    }
  },
  {
    "model": "sessions.session",
    "pk": "5n19gxnuliqanp0j1t8ao8tv24rck63v",
    "fields": {
      "session_data": ".eJxtkctu4zAMRf9Fa8OwYyl-LGc_q1kWhUBLtK2JIgWS3DQI8u-lXPcFdGWK94CXvL4zUMqvLklY04IuGQXJeCfPmBavIxue7uy9ZgO7QIxXHzQrGCQ21O3hKHrR9rzkdS-4KNgaMTg4I8H_jNYLhLSwx3PxaWP9bBwb7hspLycCaxqHZzBWvmAw074BCWdwGpIPNwKimd16YcMENmLBAmoTUCW5BssGt1q7z_h4ZB6sPF0hzPGzmSBhNqdixpirbR853qTyepPIEej7KNhC9hbp7hRWpPe23U3uNl8kSWoNgcKjnX9AWTLOJEO2Wv4SWXMgQkaMMWeOrxdDxw4V9fLvkFtGRu8ZfeuNoE7osqD_g5t9qbxLwYxlRspdjeVfusn-2dkfAxaISx6LXImu1WISFfTYYsc7Udei6ireVkfeKN3oA3aH6tj3vJ7q5tiKqcORN2PTY88eb7v0wtw:1sqcRe:9b6lStwrLT6Unj9SapHwn1O8UnHpaS2_LZ1vDDhWWGM",
      "expire_date": "2024-10-01T17:56:58.054Z"
    }
  },
  {
    "model": "sessions.session",
    "pk": "drupvcjp15g7w9u2uvz91uqfybb8lqh1",
    "fields": {
      "session_data": ".eJxVjEsOwiAUAO_C2hAoD3i4dN8zED4PqRqalHZlvLsh6UK3M5N5Mx-Ovfqj0-aXzK5MsssviyE9qQ2RH6HdV57Wtm9L5CPhp-18XjO9bmf7N6ih17ElSBpt1kWL4MgSAmoptUABVhhQKas8EU7COAeySGWsLkgRVFSOHPt8AbcaNp0:1sknAL:vHn0NdWxJoxiJ6fLqRxl8WGHGRSk-HQ_MaF_gG80dHw",
      "expire_date": "2024-09-15T16:11:01.882Z"
    }
  },
  {
    "model": "sessions.session",
    "pk": "juoa9drys39hrdtj7z4jmxc6mutfat9b",
    "fields": {
      "session_data": ".eJxVjEsOwiAUAO_C2hAoD3i4dN8zED4PqRqalHZlvLsh6UK3M5N5Mx-Ovfqj0-aXzK5MsssviyE9qQ2RH6HdV57Wtm9L5CPhp-18XjO9bmf7N6ih17ElSBpt1kWL4MgSAmoptUABVhhQKas8EU7COAeySGWsLkgRVFSOHPt8AbcaNp0:1sniqx:Zm9N19sBN5ZpHB_KtMLrtzNpi8H5LxW3zp4AVwgj1hA",
      "expire_date": "2024-09-23T18:11:07.387Z"
    }
  },
  {
    "model": "sessions.session",
    "pk": "jy2ps9i9f1miehj7cjrcbpbwv0z82pf4",
    "fields": {
      "session_data": ".eJxVjEsOwiAUAO_C2hAoD3i4dN8zED4PqRqalHZlvLsh6UK3M5N5Mx-Ovfqj0-aXzK5MsssviyE9qQ2RH6HdV57Wtm9L5CPhp-18XjO9bmf7N6ih17ElSBpt1kWL4MgSAmoptUABVhhQKas8EU7COAeySGWsLkgRVFSOHPt8AbcaNp0:1smGbc:vyr60Hd04oKpXKaI0D0alZvfKGCl7OJusZMtltCXltQ",
      "expire_date": "2024-09-19T17:49:16.063Z"
    }
  },
  {
    "model": "sessions.session",
    "pk": "o77bj2w820ti98h0epeuuasusv55lvvg",
    "fields": {
      "session_data": ".eJxVT8tuhSAQ_ZdZG8OADOiu_Y2mMQjTq6mVRrAbc_-9aO3C3cmZ85odUvSTm533cVtyn7LLnKDbnxX8c27LIy958i5Pcem_OI8xFM3bDn8YunsKFG-GDo00QmlLtiYUQqkKvtf4MwVei-MR42PmIt2mIwDRNkIZ0bTUSl2AQa3h-V7B2d9vidf-VEq4cYPzn7wcBzfPB11fK-pTc51T_XL74vVy3aJGl8ajgBBbq7QMLJCMJiQKTquAg7XIg_mw7IWSkpRqAksXyHJwLISnZuCy-hdPbW-T:1ssSvG:skWi9eASjavE-I2VRnR-HI9Lr5k07zQN1qqaPZKv2fk",
      "expire_date": "2024-10-06T20:11:10.148Z"
    }
  },
  {
    "model": "sessions.session",
    "pk": "u57rizadi482jjq33frulzw8cfdhj97w",
    "fields": {
      "session_data": ".eJxVjEsOwiAUAO_C2hAoD3i4dN8zED4PqRqalHZlvLsh6UK3M5N5Mx-Ovfqj0-aXzK5MsssviyE9qQ2RH6HdV57Wtm9L5CPhp-18XjO9bmf7N6ih17ElSBpt1kWL4MgSAmoptUABVhhQKas8EU7COAeySGWsLkgRVFSOHPt8AbcaNp0:1slAP6:mxqMshtpd30tI_2QnmgYsndw8bRiL4HXrZxWHbIVTJA",
      "expire_date": "2024-09-16T16:59:48.654Z"
    }
  },
  {
    "model": "sessions.session",
    "pk": "v37j4fcep7cq8jyprci1e2ff1s4plr9b",
    "fields": {
      "session_data": ".eJxVjEsOwiAUAO_C2hAoD3i4dN8zED4PqRqalHZlvLsh6UK3M5N5Mx-Ovfqj0-aXzK5MsssviyE9qQ2RH6HdV57Wtm9L5CPhp-18XjO9bmf7N6ih17ElSBpt1kWL4MgSAmoptUABVhhQKas8EU7COAeySGWsLkgRVFSOHPt8AbcaNp0:1sjkCM:o_AsH4_imTo09_kd6BkOGebsfpIc1ZsG64DTwa8fedo",
      "expire_date": "2024-09-12T18:48:46.446Z"
    }
  },
  {
    "model": "sessions.session",
    "pk": "w0kaqxp6fsmke9izvdel3nnz3iclhqvy",
    "fields": {
      "session_data": ".eJxVjEsOwiAUAO_C2hAoD3i4dN8zED4PqRqalHZlvLsh6UK3M5N5Mx-Ovfqj0-aXzK5MsssviyE9qQ2RH6HdV57Wtm9L5CPhp-18XjO9bmf7N6ih17ElSBpt1kWL4MgSAmoptUABVhhQKas8EU7COAeySGWsLkgRVFSOHPt8AbcaNp0:1slA7C:j-NebwAm0y-E3-BpMYXYyt6YrtTzI3jN9nwZcYXQ3HA",
      "expire_date": "2024-09-16T16:41:18.888Z"
    }
  },
  {
    "model": "main.userprofile",
    "pk": 1,
    "fields": { "user": 1, "bio": "I am the king", "pfp": null }
  },
  {
    "model": "main.userprofile",
    "pk": 2,
    "fields": { "user": 3, "bio": null, "pfp": null }
  },
  {
    "model": "main.userprofile",
    "pk": 3,
    "fields": {
      "user": 2,
      "bio": "",
      "pfp": "image/upload/v1727035901/cbggimlnp3yu2ixpolnx.jpg"
    }
  },
  {
    "model": "main.subject",
    "pk": 3,
    "fields": {
      "name": "Data Science",
      "description": "An all-encompassing guide to data science, from fundamentals to advanced applications.",
      "auto_slug": "data-science"
    }
  },
  {
    "model": "main.subject",
    "pk": 5,
    "fields": {
      "name": "MERN Stack",
      "description": "A complete guide to mastering full-stack development using the MERN stack.",
      "auto_slug": "mern-stack"
    }
  },
  {
    "model": "main.subject",
    "pk": 6,
    "fields": {
      "name": "Django Web Development",
      "description": "A complete guide to mastering web development using the Django framework.",
      "auto_slug": "django-web-development"
    }
  },
  {
    "model": "main.subject",
    "pk": 7,
    "fields": {
      "name": "PHP Web Development",
      "description": "A complete guide to mastering web development using PHP.",
      "auto_slug": "php-web-development"
    }
  },
  {
    "model": "main.subject",
    "pk": 8,
    "fields": {
      "name": "Python Programming",
      "description": "A complete guide to mastering Python programming, from the basics to advanced applications.",
      "auto_slug": "python-programming"
    }
  },
  {
    "model": "main.subject",
    "pk": 9,
    "fields": {
      "name": "Web Design",
      "description": "An in-depth guide to mastering web design from fundamentals to advanced techniques.",
      "auto_slug": "web-design"
    }
  },
  {
    "model": "main.topic",
    "pk": 68,
    "fields": {
      "subject": 3,
      "name": "Introduction to Data Science",
      "description": "Overview, importance, and lifecycle of data science projects.",
      "auto_slug": "introduction-to-data-science"
    }
  },
  {
    "model": "main.topic",
    "pk": 69,
    "fields": {
      "subject": 3,
      "name": "Programming for Data Science",
      "description": "Python programming essentials for data science.",
      "auto_slug": "programming-for-data-science"
    }
  },
  {
    "model": "main.topic",
    "pk": 70,
    "fields": {
      "subject": 3,
      "name": "Mathematics for Data Science",
      "description": "Key math concepts: linear algebra, statistics, and calculus.",
      "auto_slug": "mathematics-for-data-science"
    }
  },
  {
    "model": "main.topic",
    "pk": 71,
    "fields": {
      "subject": 3,
      "name": "Data Analysis and Manipulation",
      "description": "Data wrangling, cleaning, and exploration with Python.",
      "auto_slug": "data-analysis-and-manipulation"
    }
  },
  {
    "model": "main.topic",
    "pk": 72,
    "fields": {
      "subject": 3,
      "name": "Exploratory Data Analysis (EDA) and Visualization",
      "description": "Fundamentals of data visualization and descriptive statistics.",
      "auto_slug": "exploratory-data-analysis-eda-and-visualization"
    }
  },
  {
    "model": "main.topic",
    "pk": 73,
    "fields": {
      "subject": 3,
      "name": "Introduction to Machine Learning",
      "description": "Basics of machine learning, types, and algorithms.",
      "auto_slug": "introduction-to-machine-learning"
    }
  },
  {
    "model": "main.topic",
    "pk": 74,
    "fields": {
      "subject": 3,
      "name": "Supervised Learning Techniques",
      "description": "In-depth study of supervised learning methods.",
      "auto_slug": "supervised-learning-techniques"
    }
  },
  {
    "model": "main.topic",
    "pk": 75,
    "fields": {
      "subject": 3,
      "name": "Unsupervised Learning Techniques",
      "description": "Overview of clustering and dimensionality reduction.",
      "auto_slug": "unsupervised-learning-techniques"
    }
  },
  {
    "model": "main.topic",
    "pk": 76,
    "fields": {
      "subject": 3,
      "name": "Advanced Machine Learning Techniques",
      "description": "Ensemble learning, model optimization, and regularization.",
      "auto_slug": "advanced-machine-learning-techniques"
    }
  },
  {
    "model": "main.topic",
    "pk": 77,
    "fields": {
      "subject": 3,
      "name": "Introduction to Deep Learning",
      "description": "Basics of neural networks and deep learning frameworks.",
      "auto_slug": "introduction-to-deep-learning"
    }
  },
  {
    "model": "main.topic",
    "pk": 78,
    "fields": {
      "subject": 3,
      "name": "Specialized Deep Learning Models",
      "description": "Advanced models: CNNs, RNNs, and GANs.",
      "auto_slug": "specialized-deep-learning-models"
    }
  },
  {
    "model": "main.topic",
    "pk": 79,
    "fields": {
      "subject": 3,
      "name": "Natural Language Processing (NLP)",
      "description": "Text processing and NLP techniques.",
      "auto_slug": "natural-language-processing-nlp"
    }
  },
  {
    "model": "main.topic",
    "pk": 80,
    "fields": {
      "subject": 3,
      "name": "Time Series Analysis",
      "description": "Analysis and forecasting of time series data.",
      "auto_slug": "time-series-analysis"
    }
  },
  {
    "model": "main.topic",
    "pk": 81,
    "fields": {
      "subject": 3,
      "name": "Data Engineering Fundamentals",
      "description": "Data management, ETL processes, and big data tools.",
      "auto_slug": "data-engineering-fundamentals"
    }
  },
  {
    "model": "main.topic",
    "pk": 82,
    "fields": {
      "subject": 3,
      "name": "Model Deployment and Maintenance",
      "description": "Deploy models using Flask, Docker, and cloud platforms.",
      "auto_slug": "model-deployment-and-maintenance"
    }
  },
  {
    "model": "main.topic",
    "pk": 83,
    "fields": {
      "subject": 3,
      "name": "Ethics and Fairness in Data Science",
      "description": "Ethical considerations, bias, and fairness in AI.",
      "auto_slug": "ethics-and-fairness-in-data-science"
    }
  },
  {
    "model": "main.topic",
    "pk": 84,
    "fields": {
      "subject": 3,
      "name": "Practical Data Science Projects",
      "description": "Hands-on projects and real-world case studies.",
      "auto_slug": "practical-data-science-projects"
    }
  },
  {
    "model": "main.topic",
    "pk": 85,
    "fields": {
      "subject": 3,
      "name": "Data Privacy and Security",
      "description": "Protecting data and ensuring privacy.",
      "auto_slug": "data-privacy-and-security"
    }
  },
  {
    "model": "main.topic",
    "pk": 86,
    "fields": {
      "subject": 3,
      "name": "Feature Engineering",
      "description": "Techniques for creating effective features.",
      "auto_slug": "feature-engineering"
    }
  },
  {
    "model": "main.topic",
    "pk": 87,
    "fields": {
      "subject": 3,
      "name": "Introduction to Cloud Computing",
      "description": "Using cloud services for data science.",
      "auto_slug": "introduction-to-cloud-computing"
    }
  },
  {
    "model": "main.topic",
    "pk": 88,
    "fields": {
      "subject": 3,
      "name": "Big Data Analytics",
      "description": "Analysis of large-scale data using Hadoop and Spark.",
      "auto_slug": "big-data-analytics"
    }
  },
  {
    "model": "main.topic",
    "pk": 89,
    "fields": {
      "subject": 3,
      "name": "Data Science Tools and Platforms",
      "description": "Overview of tools like Jupyter, RStudio, and Apache Spark.",
      "auto_slug": "data-science-tools-and-platforms"
    }
  },
  {
    "model": "main.topic",
    "pk": 121,
    "fields": {
      "subject": 5,
      "name": "Introduction to MERN Stack",
      "description": "Overview of the MERN stack and its components.",
      "auto_slug": "introduction-to-mern-stack"
    }
  },
  {
    "model": "main.topic",
    "pk": 122,
    "fields": {
      "subject": 5,
      "name": "JavaScript Essentials",
      "description": "Advanced JavaScript concepts, ES6+, and best practices.",
      "auto_slug": "javascript-essentials"
    }
  },
  {
    "model": "main.topic",
    "pk": 123,
    "fields": {
      "subject": 5,
      "name": "Node.js Fundamentals",
      "description": "Understanding Node.js, npm, and asynchronous programming.",
      "auto_slug": "nodejs-fundamentals"
    }
  },
  {
    "model": "main.topic",
    "pk": 124,
    "fields": {
      "subject": 5,
      "name": "Building RESTful APIs with Express.js",
      "description": "Introduction to Express.js, routing, and middleware.",
      "auto_slug": "building-restful-apis-with-expressjs"
    }
  },
  {
    "model": "main.topic",
    "pk": 125,
    "fields": {
      "subject": 5,
      "name": "Advanced Express Techniques",
      "description": "Error handling, JWT authentication, and security practices.",
      "auto_slug": "advanced-express-techniques"
    }
  },
  {
    "model": "main.topic",
    "pk": 126,
    "fields": {
      "subject": 5,
      "name": "Database Fundamentals with MongoDB",
      "description": "CRUD operations, indexing, and schema design in MongoDB.",
      "auto_slug": "database-fundamentals-with-mongodb"
    }
  },
  {
    "model": "main.topic",
    "pk": 127,
    "fields": {
      "subject": 5,
      "name": "Advanced MongoDB",
      "description": "Aggregation framework, transactions, and replication.",
      "auto_slug": "advanced-mongodb"
    }
  },
  {
    "model": "main.topic",
    "pk": 128,
    "fields": {
      "subject": 5,
      "name": "Connecting Express with MongoDB",
      "description": "Using Mongoose for data modeling and validation.",
      "auto_slug": "connecting-express-with-mongodb"
    }
  },
  {
    "model": "main.topic",
    "pk": 129,
    "fields": {
      "subject": 5,
      "name": "React Fundamentals",
      "description": "Introduction to React, components, and JSX.",
      "auto_slug": "react-fundamentals"
    }
  },
  {
    "model": "main.topic",
    "pk": 130,
    "fields": {
      "subject": 5,
      "name": "React Hooks and State Management",
      "description": "Understanding hooks, context API, and state management.",
      "auto_slug": "react-hooks-and-state-management"
    }
  },
  {
    "model": "main.topic",
    "pk": 131,
    "fields": {
      "subject": 5,
      "name": "Advanced React Patterns",
      "description": "Higher-order components, render props, and custom hooks.",
      "auto_slug": "advanced-react-patterns"
    }
  },
  {
    "model": "main.topic",
    "pk": 132,
    "fields": {
      "subject": 5,
      "name": "Routing in React with React Router",
      "description": "Implementing client-side routing with React Router.",
      "auto_slug": "routing-in-react-with-react-router"
    }
  },
  {
    "model": "main.topic",
    "pk": 133,
    "fields": {
      "subject": 5,
      "name": "Styling React Applications",
      "description": "CSS-in-JS, styled-components, and Tailwind CSS.",
      "auto_slug": "styling-react-applications"
    }
  },
  {
    "model": "main.topic",
    "pk": 134,
    "fields": {
      "subject": 5,
      "name": "State Management with Redux",
      "description": "Using Redux for global state management and side effects.",
      "auto_slug": "state-management-with-redux"
    }
  },
  {
    "model": "main.topic",
    "pk": 135,
    "fields": {
      "subject": 5,
      "name": "Integrating React with Backend APIs",
      "description": "Fetching data from APIs and managing asynchronous calls.",
      "auto_slug": "integrating-react-with-backend-apis"
    }
  },
  {
    "model": "main.topic",
    "pk": 136,
    "fields": {
      "subject": 5,
      "name": "Authentication in MERN",
      "description": "User authentication with JWT, OAuth, and sessions.",
      "auto_slug": "authentication-in-mern"
    }
  },
  {
    "model": "main.topic",
    "pk": 137,
    "fields": {
      "subject": 5,
      "name": "File Uploads and Storage",
      "description": "Handling file uploads with Multer and cloud storage.",
      "auto_slug": "file-uploads-and-storage"
    }
  },
  {
    "model": "main.topic",
    "pk": 138,
    "fields": {
      "subject": 5,
      "name": "Testing MERN Applications",
      "description": "Unit, integration, and end-to-end testing with Jest and Mocha.",
      "auto_slug": "testing-mern-applications"
    }
  },
  {
    "model": "main.topic",
    "pk": 139,
    "fields": {
      "subject": 5,
      "name": "Advanced Node.js and Express Techniques",
      "description": "Clustering, scaling, and performance optimization.",
      "auto_slug": "advanced-nodejs-and-express-techniques"
    }
  },
  {
    "model": "main.topic",
    "pk": 140,
    "fields": {
      "subject": 5,
      "name": "Real-time Communication with Socket.io",
      "description": "Implementing WebSockets for real-time applications.",
      "auto_slug": "real-time-communication-with-socketio"
    }
  },
  {
    "model": "main.topic",
    "pk": 141,
    "fields": {
      "subject": 5,
      "name": "GraphQL with MERN",
      "description": "Introduction to GraphQL and integrating with MERN stack.",
      "auto_slug": "graphql-with-mern"
    }
  },
  {
    "model": "main.topic",
    "pk": 142,
    "fields": {
      "subject": 5,
      "name": "Deployment and DevOps for MERN",
      "description": "Deploying MERN applications using Docker, AWS, and CI/CD pipelines.",
      "auto_slug": "deployment-and-devops-for-mern"
    }
  },
  {
    "model": "main.topic",
    "pk": 143,
    "fields": {
      "subject": 5,
      "name": "Server-side Rendering with Next.js",
      "description": "Using Next.js for server-side rendering in React applications.",
      "auto_slug": "server-side-rendering-with-nextjs"
    }
  },
  {
    "model": "main.topic",
    "pk": 144,
    "fields": {
      "subject": 5,
      "name": "Caching and Performance Optimization",
      "description": "Implementing caching strategies with Redis and optimizing performance.",
      "auto_slug": "caching-and-performance-optimization"
    }
  },
  {
    "model": "main.topic",
    "pk": 145,
    "fields": {
      "subject": 5,
      "name": "Microservices Architecture with MERN",
      "description": "Building and deploying microservices using Node.js and Docker.",
      "auto_slug": "microservices-architecture-with-mern"
    }
  },
  {
    "model": "main.topic",
    "pk": 146,
    "fields": {
      "subject": 5,
      "name": "Handling Payments",
      "description": "Integrating payment gateways like Stripe and PayPal.",
      "auto_slug": "handling-payments"
    }
  },
  {
    "model": "main.topic",
    "pk": 147,
    "fields": {
      "subject": 5,
      "name": "Advanced Security Practices",
      "description": "Implementing advanced security measures like CSRF, XSS, and encryption.",
      "auto_slug": "advanced-security-practices"
    }
  },
  {
    "model": "main.topic",
    "pk": 148,
    "fields": {
      "subject": 5,
      "name": "Scalable Application Design",
      "description": "Designing scalable and maintainable applications with MERN.",
      "auto_slug": "scalable-application-design"
    }
  },
  {
    "model": "main.topic",
    "pk": 149,
    "fields": {
      "subject": 5,
      "name": "Building RESTful APIs with GraphQL",
      "description": "Combining REST and GraphQL for flexible APIs.",
      "auto_slug": "building-restful-apis-with-graphql"
    }
  },
  {
    "model": "main.topic",
    "pk": 150,
    "fields": {
      "subject": 5,
      "name": "Real-world MERN Projects",
      "description": "Developing capstone projects and real-world applications.",
      "auto_slug": "real-world-mern-projects"
    }
  },
  {
    "model": "main.topic",
    "pk": 151,
    "fields": {
      "subject": 6,
      "name": "Introduction to Django",
      "description": "Overview of Django, its features, and the MVC architecture.",
      "auto_slug": "introduction-to-django"
    }
  },
  {
    "model": "main.topic",
    "pk": 152,
    "fields": {
      "subject": 6,
      "name": "Setting Up the Django Environment",
      "description": "Installing Django, setting up a virtual environment, and creating a project.",
      "auto_slug": "setting-up-the-django-environment"
    }
  },
  {
    "model": "main.topic",
    "pk": 153,
    "fields": {
      "subject": 6,
      "name": "Django Project Structure",
      "description": "Understanding Django's project structure, apps, and their components.",
      "auto_slug": "django-project-structure"
    }
  },
  {
    "model": "main.topic",
    "pk": 154,
    "fields": {
      "subject": 6,
      "name": "Django Models and ORM",
      "description": "Creating models, using Django ORM for database operations, and migrations.",
      "auto_slug": "django-models-and-orm"
    }
  },
  {
    "model": "main.topic",
    "pk": 155,
    "fields": {
      "subject": 6,
      "name": "Django Views and Templates",
      "description": "Function-based views (FBV), class-based views (CBV), and using templates for dynamic content.",
      "auto_slug": "django-views-and-templates"
    }
  },
  {
    "model": "main.topic",
    "pk": 156,
    "fields": {
      "subject": 6,
      "name": "Django Forms and Validations",
      "description": "Creating forms, handling form submissions, and performing validations.",
      "auto_slug": "django-forms-and-validations"
    }
  },
  {
    "model": "main.topic",
    "pk": 157,
    "fields": {
      "subject": 6,
      "name": "Django URL Routing",
      "description": "Defining URL patterns and linking views to URLs.",
      "auto_slug": "django-url-routing"
    }
  },
  {
    "model": "main.topic",
    "pk": 158,
    "fields": {
      "subject": 6,
      "name": "Django Admin Interface",
      "description": "Customizing the Django admin panel and managing models.",
      "auto_slug": "django-admin-interface"
    }
  },
  {
    "model": "main.topic",
    "pk": 159,
    "fields": {
      "subject": 6,
      "name": "Static and Media Files in Django",
      "description": "Serving static and media files in a Django project.",
      "auto_slug": "static-and-media-files-in-django"
    }
  },
  {
    "model": "main.topic",
    "pk": 160,
    "fields": {
      "subject": 6,
      "name": "User Authentication in Django",
      "description": "Implementing user authentication, login, logout, and registration.",
      "auto_slug": "user-authentication-in-django"
    }
  },
  {
    "model": "main.topic",
    "pk": 161,
    "fields": {
      "subject": 6,
      "name": "Django Middleware",
      "description": "Understanding middleware and creating custom middleware.",
      "auto_slug": "django-middleware"
    }
  },
  {
    "model": "main.topic",
    "pk": 162,
    "fields": {
      "subject": 6,
      "name": "Advanced Django ORM Techniques",
      "description": "Query optimization, aggregation, and using raw SQL queries.",
      "auto_slug": "advanced-django-orm-techniques"
    }
  },
  {
    "model": "main.topic",
    "pk": 163,
    "fields": {
      "subject": 6,
      "name": "Django Security Best Practices",
      "description": "Implementing security measures like CSRF, XSS, and SQL injection prevention.",
      "auto_slug": "django-security-best-practices"
    }
  },
  {
    "model": "main.topic",
    "pk": 164,
    "fields": {
      "subject": 6,
      "name": "File Uploads and Management",
      "description": "Handling file uploads and management in Django.",
      "auto_slug": "file-uploads-and-management"
    }
  },
  {
    "model": "main.topic",
    "pk": 165,
    "fields": {
      "subject": 6,
      "name": "Django REST Framework (DRF)",
      "description": "Building RESTful APIs using Django REST Framework.",
      "auto_slug": "django-rest-framework-drf"
    }
  },
  {
    "model": "main.topic",
    "pk": 166,
    "fields": {
      "subject": 6,
      "name": "Testing in Django",
      "description": "Writing unit tests, integration tests, and using Django's testing tools.",
      "auto_slug": "testing-in-django"
    }
  },
  {
    "model": "main.topic",
    "pk": 167,
    "fields": {
      "subject": 6,
      "name": "Internationalization and Localization",
      "description": "Translating a Django app to multiple languages.",
      "auto_slug": "internationalization-and-localization"
    }
  },
  {
    "model": "main.topic",
    "pk": 168,
    "fields": {
      "subject": 6,
      "name": "Django Signals",
      "description": "Using signals for decoupled event handling in Django.",
      "auto_slug": "django-signals"
    }
  },
  {
    "model": "main.topic",
    "pk": 169,
    "fields": {
      "subject": 6,
      "name": "Caching in Django",
      "description": "Implementing caching strategies to optimize performance.",
      "auto_slug": "caching-in-django"
    }
  },
  {
    "model": "main.topic",
    "pk": 170,
    "fields": {
      "subject": 6,
      "name": "Integrating Frontend Frameworks",
      "description": "Combining Django with frontend frameworks like React or Vue.js.",
      "auto_slug": "integrating-frontend-frameworks"
    }
  },
  {
    "model": "main.topic",
    "pk": 171,
    "fields": {
      "subject": 6,
      "name": "GraphQL with Django",
      "description": "Building GraphQL APIs with Django and Graphene.",
      "auto_slug": "graphql-with-django"
    }
  },
  {
    "model": "main.topic",
    "pk": 172,
    "fields": {
      "subject": 6,
      "name": "Real-time Features with Django Channels",
      "description": "Adding real-time capabilities with WebSockets using Django Channels.",
      "auto_slug": "real-time-features-with-django-channels"
    }
  },
  {
    "model": "main.topic",
    "pk": 173,
    "fields": {
      "subject": 6,
      "name": "Django Deployment",
      "description": "Deploying Django applications using Gunicorn, Nginx, and Docker.",
      "auto_slug": "django-deployment"
    }
  },
  {
    "model": "main.topic",
    "pk": 174,
    "fields": {
      "subject": 6,
      "name": "Continuous Integration/Continuous Deployment (CI/CD)",
      "description": "Automating deployment with tools like Jenkins, Travis CI, and GitHub Actions.",
      "auto_slug": "continuous-integrationcontinuous-deployment-cicd"
    }
  },
  {
    "model": "main.topic",
    "pk": 175,
    "fields": {
      "subject": 6,
      "name": "Django Asynchronous Views",
      "description": "Implementing asynchronous views and optimizing performance.",
      "auto_slug": "django-asynchronous-views"
    }
  },
  {
    "model": "main.topic",
    "pk": 176,
    "fields": {
      "subject": 6,
      "name": "Scaling Django Applications",
      "description": "Scaling applications horizontally and vertically.",
      "auto_slug": "scaling-django-applications"
    }
  },
  {
    "model": "main.topic",
    "pk": 177,
    "fields": {
      "subject": 6,
      "name": "Custom Django Commands",
      "description": "Creating custom management commands for Django applications.",
      "auto_slug": "custom-django-commands"
    }
  },
  {
    "model": "main.topic",
    "pk": 178,
    "fields": {
      "subject": 6,
      "name": "WebSockets in Django",
      "description": "Implementing WebSockets for real-time data communication.",
      "auto_slug": "websockets-in-django"
    }
  },
  {
    "model": "main.topic",
    "pk": 179,
    "fields": {
      "subject": 6,
      "name": "Dockerizing Django Projects",
      "description": "Containerizing Django applications with Docker.",
      "auto_slug": "dockerizing-django-projects"
    }
  },
  {
    "model": "main.topic",
    "pk": 180,
    "fields": {
      "subject": 6,
      "name": "Advanced Django Settings Management",
      "description": "Managing settings for different environments and secrets management.",
      "auto_slug": "advanced-django-settings-management"
    }
  },
  {
    "model": "main.topic",
    "pk": 181,
    "fields": {
      "subject": 6,
      "name": "Building a SaaS Application with Django",
      "description": "Designing and developing a SaaS platform using Django.",
      "auto_slug": "building-a-saas-application-with-django"
    }
  },
  {
    "model": "main.topic",
    "pk": 182,
    "fields": {
      "subject": 6,
      "name": "Practical Django Projects",
      "description": "Building real-world applications like eCommerce, blogs, and social networks.",
      "auto_slug": "practical-django-projects"
    }
  },
  {
    "model": "main.topic",
    "pk": 183,
    "fields": {
      "subject": 7,
      "name": "Introduction to PHP",
      "description": "Basics of PHP, its syntax, and setup.",
      "auto_slug": "introduction-to-php"
    }
  },
  {
    "model": "main.topic",
    "pk": 184,
    "fields": {
      "subject": 7,
      "name": "PHP Environment Setup",
      "description": "Installing PHP, setting up a local development environment using XAMPP, WAMP, or MAMP.",
      "auto_slug": "php-environment-setup"
    }
  },
  {
    "model": "main.topic",
    "pk": 185,
    "fields": {
      "subject": 7,
      "name": "PHP Syntax and Basics",
      "description": "Variables, data types, operators, and control structures.",
      "auto_slug": "php-syntax-and-basics"
    }
  },
  {
    "model": "main.topic",
    "pk": 186,
    "fields": {
      "subject": 7,
      "name": "PHP Functions",
      "description": "Defining and using functions, scope, and variable functions.",
      "auto_slug": "php-functions"
    }
  },
  {
    "model": "main.topic",
    "pk": 187,
    "fields": {
      "subject": 7,
      "name": "PHP Arrays",
      "description": "Working with indexed, associative, and multidimensional arrays.",
      "auto_slug": "php-arrays"
    }
  },
  {
    "model": "main.topic",
    "pk": 188,
    "fields": {
      "subject": 7,
      "name": "PHP Strings",
      "description": "String manipulation, concatenation, and functions.",
      "auto_slug": "php-strings"
    }
  },
  {
    "model": "main.topic",
    "pk": 189,
    "fields": {
      "subject": 7,
      "name": "Form Handling with PHP",
      "description": "Handling GET and POST requests, form validation, and sanitization.",
      "auto_slug": "form-handling-with-php"
    }
  },
  {
    "model": "main.topic",
    "pk": 190,
    "fields": {
      "subject": 7,
      "name": "PHP Sessions and Cookies",
      "description": "Creating and managing sessions and cookies for user data.",
      "auto_slug": "php-sessions-and-cookies"
    }
  },
  {
    "model": "main.topic",
    "pk": 191,
    "fields": {
      "subject": 7,
      "name": "PHP File Handling",
      "description": "Reading, writing, and managing files with PHP.",
      "auto_slug": "php-file-handling"
    }
  },
  {
    "model": "main.topic",
    "pk": 192,
    "fields": {
      "subject": 7,
      "name": "PHP Object-Oriented Programming (OOP)",
      "description": "Classes, objects, inheritance, polymorphism, and encapsulation.",
      "auto_slug": "php-object-oriented-programming-oop"
    }
  },
  {
    "model": "main.topic",
    "pk": 193,
    "fields": {
      "subject": 7,
      "name": "PHP Error and Exception Handling",
      "description": "Handling errors and exceptions using try-catch blocks.",
      "auto_slug": "php-error-and-exception-handling"
    }
  },
  {
    "model": "main.topic",
    "pk": 194,
    "fields": {
      "subject": 7,
      "name": "PHP Regular Expressions",
      "description": "Using regular expressions for pattern matching and validation.",
      "auto_slug": "php-regular-expressions"
    }
  },
  {
    "model": "main.topic",
    "pk": 195,
    "fields": {
      "subject": 7,
      "name": "PHP and MySQL Integration",
      "description": "Connecting to a MySQL database, CRUD operations, and prepared statements.",
      "auto_slug": "php-and-mysql-integration"
    }
  },
  {
    "model": "main.topic",
    "pk": 196,
    "fields": {
      "subject": 7,
      "name": "Advanced Database Operations",
      "description": "Transactions, indexing, joins, and optimizing queries.",
      "auto_slug": "advanced-database-operations"
    }
  },
  {
    "model": "main.topic",
    "pk": 197,
    "fields": {
      "subject": 7,
      "name": "PHP Frameworks Overview",
      "description": "Introduction to popular PHP frameworks like Laravel, Symfony, and CodeIgniter.",
      "auto_slug": "php-frameworks-overview"
    }
  },
  {
    "model": "main.topic",
    "pk": 198,
    "fields": {
      "subject": 7,
      "name": "Building Web Applications with Laravel",
      "description": "MVC architecture, routing, blade templates, and Eloquent ORM.",
      "auto_slug": "building-web-applications-with-laravel"
    }
  },
  {
    "model": "main.topic",
    "pk": 199,
    "fields": {
      "subject": 7,
      "name": "RESTful API Development with PHP",
      "description": "Creating REST APIs, handling requests, and using JSON.",
      "auto_slug": "restful-api-development-with-php"
    }
  },
  {
    "model": "main.topic",
    "pk": 200,
    "fields": {
      "subject": 7,
      "name": "PHP Security Best Practices",
      "description": "Preventing SQL injection, XSS, CSRF, and securing user data.",
      "auto_slug": "php-security-best-practices"
    }
  },
  {
    "model": "main.topic",
    "pk": 201,
    "fields": {
      "subject": 7,
      "name": "PHP Unit Testing",
      "description": "Writing unit tests using PHPUnit for code quality assurance.",
      "auto_slug": "php-unit-testing"
    }
  },
  {
    "model": "main.topic",
    "pk": 202,
    "fields": {
      "subject": 7,
      "name": "PHP Mail Handling",
      "description": "Sending emails with PHP, using libraries like PHPMailer.",
      "auto_slug": "php-mail-handling"
    }
  },
  {
    "model": "main.topic",
    "pk": 203,
    "fields": {
      "subject": 7,
      "name": "Working with Composer",
      "description": "Managing PHP dependencies with Composer.",
      "auto_slug": "working-with-composer"
    }
  },
  {
    "model": "main.topic",
    "pk": 204,
    "fields": {
      "subject": 7,
      "name": "PHP Design Patterns",
      "description": "Implementing common design patterns like Singleton, Factory, and Observer.",
      "auto_slug": "php-design-patterns"
    }
  },
  {
    "model": "main.topic",
    "pk": 205,
    "fields": {
      "subject": 7,
      "name": "Integrating PHP with Frontend",
      "description": "Using PHP with HTML, CSS, JavaScript, and AJAX for dynamic content.",
      "auto_slug": "integrating-php-with-frontend"
    }
  },
  {
    "model": "main.topic",
    "pk": 206,
    "fields": {
      "subject": 7,
      "name": "Caching Techniques in PHP",
      "description": "Implementing caching strategies using Memcached or Redis.",
      "auto_slug": "caching-techniques-in-php"
    }
  },
  {
    "model": "main.topic",
    "pk": 207,
    "fields": {
      "subject": 7,
      "name": "PHP for Real-time Applications",
      "description": "Building real-time apps with WebSockets and PHP.",
      "auto_slug": "php-for-real-time-applications"
    }
  },
  {
    "model": "main.topic",
    "pk": 208,
    "fields": {
      "subject": 7,
      "name": "Deploying PHP Applications",
      "description": "Deploying PHP applications on various hosting environments.",
      "auto_slug": "deploying-php-applications"
    }
  },
  {
    "model": "main.topic",
    "pk": 209,
    "fields": {
      "subject": 7,
      "name": "Microservices with PHP",
      "description": "Building and managing microservices architecture with PHP.",
      "auto_slug": "microservices-with-php"
    }
  },
  {
    "model": "main.topic",
    "pk": 210,
    "fields": {
      "subject": 7,
      "name": "PHP and Cloud Platforms",
      "description": "Integrating PHP applications with cloud services like AWS, GCP, or Azure.",
      "auto_slug": "php-and-cloud-platforms"
    }
  },
  {
    "model": "main.topic",
    "pk": 211,
    "fields": {
      "subject": 7,
      "name": "GraphQL with PHP",
      "description": "Creating and managing GraphQL APIs using PHP.",
      "auto_slug": "graphql-with-php"
    }
  },
  {
    "model": "main.topic",
    "pk": 212,
    "fields": {
      "subject": 7,
      "name": "Advanced PHP Features",
      "description": "Using namespaces, traits, and generators for more robust applications.",
      "auto_slug": "advanced-php-features"
    }
  },
  {
    "model": "main.topic",
    "pk": 213,
    "fields": {
      "subject": 7,
      "name": "Building a CMS with PHP",
      "description": "Developing a Content Management System from scratch.",
      "auto_slug": "building-a-cms-with-php"
    }
  },
  {
    "model": "main.topic",
    "pk": 214,
    "fields": {
      "subject": 7,
      "name": "Optimizing PHP Applications",
      "description": "Performance optimization techniques, including code profiling and caching.",
      "auto_slug": "optimizing-php-applications"
    }
  },
  {
    "model": "main.topic",
    "pk": 215,
    "fields": {
      "subject": 7,
      "name": "Practical PHP Projects",
      "description": "Hands-on experience through building real-world projects like eCommerce sites, blogs, and REST APIs.",
      "auto_slug": "practical-php-projects"
    }
  },
  {
    "model": "main.topic",
    "pk": 216,
    "fields": {
      "subject": 8,
      "name": "Introduction to Python",
      "description": "Overview, history, and applications of Python.",
      "auto_slug": "introduction-to-python"
    }
  },
  {
    "model": "main.topic",
    "pk": 217,
    "fields": {
      "subject": 8,
      "name": "Python Installation and Setup",
      "description": "Setting up Python environment, IDEs, and virtual environments.",
      "auto_slug": "python-installation-and-setup"
    }
  },
  {
    "model": "main.topic",
    "pk": 218,
    "fields": {
      "subject": 8,
      "name": "Basic Syntax and Data Types",
      "description": "Understanding Python syntax, variables, data types, and type conversion.",
      "auto_slug": "basic-syntax-and-data-types"
    }
  },
  {
    "model": "main.topic",
    "pk": 219,
    "fields": {
      "subject": 8,
      "name": "Control Structures",
      "description": "Conditional statements, loops, and iteration.",
      "auto_slug": "control-structures"
    }
  },
  {
    "model": "main.topic",
    "pk": 220,
    "fields": {
      "subject": 8,
      "name": "Functions and Modules",
      "description": "Defining functions, scope, lambda expressions, and creating modules.",
      "auto_slug": "functions-and-modules"
    }
  },
  {
    "model": "main.topic",
    "pk": 221,
    "fields": {
      "subject": 8,
      "name": "Data Structures in Python",
      "description": "Lists, tuples, sets, dictionaries, and their operations.",
      "auto_slug": "data-structures-in-python"
    }
  },
  {
    "model": "main.topic",
    "pk": 222,
    "fields": {
      "subject": 8,
      "name": "String Manipulation",
      "description": "String operations, formatting, and regular expressions.",
      "auto_slug": "string-manipulation"
    }
  },
  {
    "model": "main.topic",
    "pk": 223,
    "fields": {
      "subject": 8,
      "name": "File Handling",
      "description": "Reading, writing, and manipulating files.",
      "auto_slug": "file-handling"
    }
  },
  {
    "model": "main.topic",
    "pk": 224,
    "fields": {
      "subject": 8,
      "name": "Error and Exception Handling",
      "description": "Using try-except blocks, handling errors, and raising exceptions.",
      "auto_slug": "error-and-exception-handling"
    }
  },
  {
    "model": "main.topic",
    "pk": 225,
    "fields": {
      "subject": 8,
      "name": "Object-Oriented Programming (OOP)",
      "description": "Classes, objects, inheritance, polymorphism, encapsulation.",
      "auto_slug": "object-oriented-programming-oop"
    }
  },
  {
    "model": "main.topic",
    "pk": 226,
    "fields": {
      "subject": 8,
      "name": "Advanced OOP Concepts",
      "description": "Magic methods, decorators, context managers, and metaclasses.",
      "auto_slug": "advanced-oop-concepts"
    }
  },
  {
    "model": "main.topic",
    "pk": 227,
    "fields": {
      "subject": 8,
      "name": "Working with Libraries and Packages",
      "description": "Installing and using libraries like NumPy, pandas, requests.",
      "auto_slug": "working-with-libraries-and-packages"
    }
  },
  {
    "model": "main.topic",
    "pk": 228,
    "fields": {
      "subject": 8,
      "name": "Data Analysis with Python",
      "description": "Data analysis using pandas, NumPy, and data visualization with Matplotlib and Seaborn.",
      "auto_slug": "data-analysis-with-python"
    }
  },
  {
    "model": "main.topic",
    "pk": 229,
    "fields": {
      "subject": 8,
      "name": "Web Development with Flask",
      "description": "Introduction to Flask, routing, templates, and building APIs.",
      "auto_slug": "web-development-with-flask"
    }
  },
  {
    "model": "main.topic",
    "pk": 230,
    "fields": {
      "subject": 8,
      "name": "Web Development with Django",
      "description": "Building web applications using Django, models, views, templates.",
      "auto_slug": "web-development-with-django"
    }
  },
  {
    "model": "main.topic",
    "pk": 231,
    "fields": {
      "subject": 8,
      "name": "Automating Tasks with Python",
      "description": "Using libraries like Selenium, BeautifulSoup, and requests for automation.",
      "auto_slug": "automating-tasks-with-python"
    }
  },
  {
    "model": "main.topic",
    "pk": 232,
    "fields": {
      "subject": 8,
      "name": "Python for Data Science",
      "description": "Introduction to data science concepts, EDA, and machine learning with scikit-learn.",
      "auto_slug": "python-for-data-science"
    }
  },
  {
    "model": "main.topic",
    "pk": 233,
    "fields": {
      "subject": 8,
      "name": "Introduction to Machine Learning",
      "description": "Understanding machine learning concepts and building models with Python.",
      "auto_slug": "introduction-to-machine-learning-2"
    }
  },
  {
    "model": "main.topic",
    "pk": 234,
    "fields": {
      "subject": 8,
      "name": "Natural Language Processing (NLP)",
      "description": "Text processing with NLTK, spaCy, sentiment analysis, and topic modeling.",
      "auto_slug": "natural-language-processing-nlp-2"
    }
  },
  {
    "model": "main.topic",
    "pk": 235,
    "fields": {
      "subject": 8,
      "name": "Concurrency and Parallelism",
      "description": "Using threading, multiprocessing, and asyncio for parallel programming.",
      "auto_slug": "concurrency-and-parallelism"
    }
  },
  {
    "model": "main.topic",
    "pk": 236,
    "fields": {
      "subject": 8,
      "name": "Python for Web Scraping",
      "description": "Web scraping techniques using BeautifulSoup, Scrapy, and requests.",
      "auto_slug": "python-for-web-scraping"
    }
  },
  {
    "model": "main.topic",
    "pk": 237,
    "fields": {
      "subject": 8,
      "name": "Working with Databases",
      "description": "Connecting to SQL and NoSQL databases using Python, ORM tools like SQLAlchemy.",
      "auto_slug": "working-with-databases"
    }
  },
  {
    "model": "main.topic",
    "pk": 238,
    "fields": {
      "subject": 8,
      "name": "Python Testing and Debugging",
      "description": "Writing unit tests, integration tests using unittest and pytest.",
      "auto_slug": "python-testing-and-debugging"
    }
  },
  {
    "model": "main.topic",
    "pk": 239,
    "fields": {
      "subject": 8,
      "name": "Advanced Python Features",
      "description": "Understanding generators, context managers, decorators, and asynchronous programming.",
      "auto_slug": "advanced-python-features"
    }
  },
  {
    "model": "main.topic",
    "pk": 240,
    "fields": {
      "subject": 8,
      "name": "Creating RESTful APIs with Python",
      "description": "Building and deploying RESTful APIs using Flask or Django REST framework.",
      "auto_slug": "creating-restful-apis-with-python"
    }
  },
  {
    "model": "main.topic",
    "pk": 241,
    "fields": {
      "subject": 8,
      "name": "Python for Cloud Computing",
      "description": "Using Python with AWS, Google Cloud, and Azure for cloud-based applications.",
      "auto_slug": "python-for-cloud-computing"
    }
  },
  {
    "model": "main.topic",
    "pk": 242,
    "fields": {
      "subject": 8,
      "name": "Python and IoT",
      "description": "Using Python with Raspberry Pi, Arduino, and IoT sensors.",
      "auto_slug": "python-and-iot"
    }
  },
  {
    "model": "main.topic",
    "pk": 243,
    "fields": {
      "subject": 8,
      "name": "Deploying Python Applications",
      "description": "Deployment strategies for Python applications using Docker, Heroku, and AWS.",
      "auto_slug": "deploying-python-applications"
    }
  },
  {
    "model": "main.topic",
    "pk": 244,
    "fields": {
      "subject": 8,
      "name": "Python Security Best Practices",
      "description": "Ensuring security in Python applications, encryption, and secure coding practices.",
      "auto_slug": "python-security-best-practices"
    }
  },
  {
    "model": "main.topic",
    "pk": 245,
    "fields": {
      "subject": 8,
      "name": "Python Game Development",
      "description": "Building games with Pygame and other game development libraries.",
      "auto_slug": "python-game-development"
    }
  },
  {
    "model": "main.topic",
    "pk": 246,
    "fields": {
      "subject": 8,
      "name": "GraphQL with Python",
      "description": "Creating and managing GraphQL APIs using Python frameworks.",
      "auto_slug": "graphql-with-python"
    }
  },
  {
    "model": "main.topic",
    "pk": 247,
    "fields": {
      "subject": 8,
      "name": "Working with Big Data in Python",
      "description": "Processing large datasets using Python tools like PySpark and Dask.",
      "auto_slug": "working-with-big-data-in-python"
    }
  },
  {
    "model": "main.topic",
    "pk": 248,
    "fields": {
      "subject": 8,
      "name": "Optimizing Python Applications",
      "description": "Improving performance through code optimization and profiling.",
      "auto_slug": "optimizing-python-applications"
    }
  },
  {
    "model": "main.topic",
    "pk": 249,
    "fields": {
      "subject": 8,
      "name": "Practical Python Projects",
      "description": "Hands-on experience with real-world projects like web scrapers, automation tools, data analysis, and more.",
      "auto_slug": "practical-python-projects"
    }
  },
  {
    "model": "main.topic",
    "pk": 250,
    "fields": {
      "subject": 9,
      "name": "Introduction to Web Design",
      "description": "Basics of web design, including principles, tools, and workflows.",
      "auto_slug": "introduction-to-web-design"
    }
  },
  {
    "model": "main.topic",
    "pk": 251,
    "fields": {
      "subject": 9,
      "name": "HTML Fundamentals",
      "description": "HTML basics, elements, attributes, and semantic markup.",
      "auto_slug": "html-fundamentals"
    }
  },
  {
    "model": "main.topic",
    "pk": 252,
    "fields": {
      "subject": 9,
      "name": "Advanced HTML",
      "description": "HTML5 features, multimedia, forms, and accessibility.",
      "auto_slug": "advanced-html"
    }
  },
  {
    "model": "main.topic",
    "pk": 253,
    "fields": {
      "subject": 9,
      "name": "CSS Fundamentals",
      "description": "CSS basics, selectors, properties, and box model.",
      "auto_slug": "css-fundamentals"
    }
  },
  {
    "model": "main.topic",
    "pk": 254,
    "fields": {
      "subject": 9,
      "name": "Advanced CSS Techniques",
      "description": "Flexbox, Grid, animations, transitions, and transformations.",
      "auto_slug": "advanced-css-techniques"
    }
  },
  {
    "model": "main.topic",
    "pk": 255,
    "fields": {
      "subject": 9,
      "name": "Responsive Web Design",
      "description": "Creating responsive designs using media queries and breakpoints.",
      "auto_slug": "responsive-web-design"
    }
  },
  {
    "model": "main.topic",
    "pk": 256,
    "fields": {
      "subject": 9,
      "name": "CSS Preprocessors",
      "description": "Introduction to Sass and Less for advanced styling.",
      "auto_slug": "css-preprocessors"
    }
  },
  {
    "model": "main.topic",
    "pk": 257,
    "fields": {
      "subject": 9,
      "name": "Tailwind CSS",
      "description": "Utility-first CSS framework for rapid UI development.",
      "auto_slug": "tailwind-css"
    }
  },
  {
    "model": "main.topic",
    "pk": 258,
    "fields": {
      "subject": 9,
      "name": "Bootstrap Framework",
      "description": "Creating responsive layouts with Bootstrap components.",
      "auto_slug": "bootstrap-framework"
    }
  },
  {
    "model": "main.topic",
    "pk": 259,
    "fields": {
      "subject": 9,
      "name": "Flowbite Components",
      "description": "Using Flowbite for pre-built components and Tailwind integration.",
      "auto_slug": "flowbite-components"
    }
  },
  {
    "model": "main.topic",
    "pk": 260,
    "fields": {
      "subject": 9,
      "name": "Introduction to JavaScript",
      "description": "JavaScript basics: syntax, variables, and control structures.",
      "auto_slug": "introduction-to-javascript"
    }
  },
  {
    "model": "main.topic",
    "pk": 261,
    "fields": {
      "subject": 9,
      "name": "Advanced JavaScript",
      "description": "ES6+ features, asynchronous programming, and APIs.",
      "auto_slug": "advanced-javascript"
    }
  },
  {
    "model": "main.topic",
    "pk": 262,
    "fields": {
      "subject": 9,
      "name": "DOM Manipulation and Events",
      "description": "Manipulating the DOM, event handling, and event delegation.",
      "auto_slug": "dom-manipulation-and-events"
    }
  },
  {
    "model": "main.topic",
    "pk": 263,
    "fields": {
      "subject": 9,
      "name": "JavaScript Frameworks Overview",
      "description": "Introduction to popular frameworks like React, Vue, and Angular.",
      "auto_slug": "javascript-frameworks-overview"
    }
  },
  {
    "model": "main.topic",
    "pk": 264,
    "fields": {
      "subject": 9,
      "name": "jQuery Fundamentals",
      "description": "Using jQuery for simplified DOM manipulation and animations.",
      "auto_slug": "jquery-fundamentals"
    }
  },
  {
    "model": "main.topic",
    "pk": 265,
    "fields": {
      "subject": 9,
      "name": "Advanced jQuery Techniques",
      "description": "jQuery plugins, AJAX, and event handling.",
      "auto_slug": "advanced-jquery-techniques"
    }
  },
  {
    "model": "main.topic",
    "pk": 266,
    "fields": {
      "subject": 9,
      "name": "Introduction to Web Animations",
      "description": "Creating animations with CSS, JavaScript, and GSAP.",
      "auto_slug": "introduction-to-web-animations"
    }
  },
  {
    "model": "main.topic",
    "pk": 267,
    "fields": {
      "subject": 9,
      "name": "Web Performance Optimization",
      "description": "Techniques for optimizing web performance, including lazy loading and caching.",
      "auto_slug": "web-performance-optimization"
    }
  },
  {
    "model": "main.topic",
    "pk": 268,
    "fields": {
      "subject": 9,
      "name": "Cross-Browser Compatibility",
      "description": "Ensuring compatibility across different browsers and devices.",
      "auto_slug": "cross-browser-compatibility"
    }
  },
  {
    "model": "main.topic",
    "pk": 269,
    "fields": {
      "subject": 9,
      "name": "Accessibility in Web Design",
      "description": "Designing accessible web content for all users.",
      "auto_slug": "accessibility-in-web-design"
    }
  },
  {
    "model": "main.topic",
    "pk": 270,
    "fields": {
      "subject": 9,
      "name": "SEO Fundamentals",
      "description": "Basics of Search Engine Optimization for web design.",
      "auto_slug": "seo-fundamentals"
    }
  },
  {
    "model": "main.topic",
    "pk": 271,
    "fields": {
      "subject": 9,
      "name": "Web Security Basics",
      "description": "Introduction to web security, HTTPS, and best practices.",
      "auto_slug": "web-security-basics"
    }
  },
  {
    "model": "main.topic",
    "pk": 272,
    "fields": {
      "subject": 9,
      "name": "Introduction to Web Development Tools",
      "description": "Using development tools like VSCode, Git, and browser dev tools.",
      "auto_slug": "introduction-to-web-development-tools"
    }
  },
  {
    "model": "main.topic",
    "pk": 273,
    "fields": {
      "subject": 9,
      "name": "Advanced CSS Frameworks",
      "description": "Exploring Bulma, Foundation, and Materialize for advanced styling.",
      "auto_slug": "advanced-css-frameworks"
    }
  },
  {
    "model": "main.topic",
    "pk": 274,
    "fields": {
      "subject": 9,
      "name": "Modern JavaScript Libraries",
      "description": "Using libraries like Lodash, Moment.js, and D3.js.",
      "auto_slug": "modern-javascript-libraries"
    }
  },
  {
    "model": "main.topic",
    "pk": 275,
    "fields": {
      "subject": 9,
      "name": "Web Design for Mobile",
      "description": "Best practices for designing mobile-first websites.",
      "auto_slug": "web-design-for-mobile"
    }
  },
  {
    "model": "main.topic",
    "pk": 276,
    "fields": {
      "subject": 9,
      "name": "Web Design Trends",
      "description": "Exploring modern trends like Neumorphism, Glassmorphism, and Dark Mode.",
      "auto_slug": "web-design-trends"
    }
  },
  {
    "model": "main.topic",
    "pk": 277,
    "fields": {
      "subject": 9,
      "name": "Introduction to JAMstack",
      "description": "Building static sites with modern tools like Gatsby, Next.js, and Hugo.",
      "auto_slug": "introduction-to-jamstack"
    }
  },
  {
    "model": "main.topic",
    "pk": 278,
    "fields": {
      "subject": 9,
      "name": "Version Control with Git",
      "description": "Using Git for version control and collaboration.",
      "auto_slug": "version-control-with-git"
    }
  },
  {
    "model": "main.topic",
    "pk": 279,
    "fields": {
      "subject": 9,
      "name": "Deploying Web Projects",
      "description": "Deploying websites using Netlify, Vercel, and traditional servers.",
      "auto_slug": "deploying-web-projects"
    }
  },
  {
    "model": "main.topic",
    "pk": 280,
    "fields": {
      "subject": 9,
      "name": "Web Design Project",
      "description": "Capstone project to create a fully functional website.",
      "auto_slug": "web-design-project"
    }
  },
  {
    "model": "main.note",
    "pk": 1,
    "fields": {
      "title": "­ƒôÿ Introduction to Django",
      "content": "## What is Django? ­ƒîÉ\r\n\r\n**Django** is a high-level Python web framework that promotes rapid development and clean, pragmatic design. Created by experienced developers, Django takes care of much of the hassle of web development, allowing you to focus on writing your app without needing to reinvent the wheel. ­ƒÜÇ\r\n\r\n### Key Features of Django ­ƒÅå\r\n\r\n1. **DRY Principle**: Django follows the \"Don't Repeat Yourself\" principle, which means you write less code and get more functionality! ­ƒÖî\r\n2. **Batteries Included**: It comes with numerous built-in features like user authentication, admin panels, and database ORM (Object-Relational Mapping) to make your life easier. ÔÜÖ´©Å\r\n3. **Security**: Django provides strong security features like protection against SQL injection, cross-site scripting, cross-site request forgery, and more. ­ƒøí´©Å\r\n4. **Scalability**: It is designed to handle the heaviest of traffic demands, so your app can scale as needed. ­ƒôê\r\n5. **Versatile**: Django is used for all kinds of web applications, from content management systems (CMS) to social networks, to scientific computing platforms. ­ƒîì\r\n\r\n## Understanding the Django Architecture ­ƒÅù´©Å\r\n\r\nDjango follows the **Model-View-Controller (MVC)** architecture, which separates the different components of a web application to make development and maintenance easier.\r\n\r\n### The MVC Architecture ­ƒÄ¿\r\n\r\n1. **Model (M)**:  \r\n   - Represents the data and the business logic.  \r\n   - Deals with everything related to the database, such as handling queries and storing data.  \r\n   - Each model is a Python class that represents a table in the database.  \r\n   - Example: A `User` model may represent a table containing user details like name, email, and password. ­ƒùé´©Å\r\n\r\n2. **View (V)**:  \r\n   - Controls what the user sees ÔÇô it is the user interface.  \r\n   - Fetches data from the model and renders it to the client (browser) through templates.  \r\n   - A view is a Python function that takes a request and returns a response, usually an HTML page. ­ƒôä\r\n\r\n3. **Controller (C)**:  \r\n   - Handles the logic that ties the model and the view together.  \r\n   - Processes user input, interacts with the model to update or retrieve data, and then passes that data to the view.  \r\n   - In Django, the controller part is handled by the **Django framework** itself, so it's often referred to as an \"MTV\" framework (Model-Template-View). ­ƒÄ«\r\n\r\n### Why is Django Called an MTV Framework? ­ƒñö\r\n\r\nIn Django:\r\n\r\n- **Model (M)** remains the same.\r\n- **Template (T)**: Represents the HTML/CSS files that define the structure of the webpage. ­ƒûî´©Å\r\n- **View (V)**: In Django, a \"view\" is the Python function that processes user requests and returns a response.\r\n\r\nSo, Django is often referred to as an \"MTV\" framework, where the **\"Template\"** replaces the \"View\" from the traditional MVC architecture.\r\n\r\n---\r\n\r\n### ­ƒÜÇ Why Choose Django?\r\n\r\n- **Fast Development**: Makes building and deploying web applications quick and easy.\r\n- **Community Support**: A large community of developers who actively contribute to improving the framework.\r\n- **Documentation**: One of the best-documented frameworks with tutorials and guides.\r\n\r\n### Conclusion ­ƒÅü\r\n\r\nDjango is a powerful and flexible framework that encourages clean, efficient, and rapid development. Its adherence to the \"DRY\" principle, built-in security features, and scalable nature make it a great choice for developers of all levels. Let's get started and build something amazing with Django! ­ƒÆ╗­ƒöÑ\r\n\r\n--- \r\n\r\n> \"Django makes it easier to build better web apps more quickly and with less code.\" ÔÇô Django Documentation ­ƒôÜ",
      "uploaded_by": 1,
      "created_at": "2024-09-01T20:00:14.743Z",
      "auto_slug": "introduction-to-django",
      "topics": [151]
    }
  },
  {
    "model": "main.note",
    "pk": 2,
    "fields": {
      "title": "­ƒîƒ Introduction to Django",
      "content": "Django is like a magical toolbox ­ƒº░ for web developers who love Python. It's a powerful web framework that lets you build robust and scalable web applications quickly, all while writing clean, readable code. Let's dive deeper into what makes Django so awesome!\r\n\r\n## ­ƒîì What is Django?\r\n\r\n**Django** is a high-level Python web framework that focuses on rapid development and a clean, pragmatic design. It was created by developers who needed to meet fast-moving newsroom deadlines, so it's designed to help you build applications quickly and efficiently. ­ƒÜÇ\r\n\r\n### ­ƒÜÇ Key Features of Django\r\n\r\n1. **Batteries Included**: Everything you need is already included! Django comes with built-in components like authentication, admin interfaces, and an ORM (Object-Relational Mapper) to handle database queries. No need to build common features from scratch! ­ƒöï\r\n\r\n2. **Security First**: Django helps protect against common security threats like SQL injection, cross-site scripting (XSS), and cross-site request forgery (CSRF) ÔÇô so you can focus on building, not worrying. ­ƒøí´©Å\r\n\r\n3. **Scalability and Flexibility**: Whether you're building a small website or a large-scale application, Django can handle it. ItÔÇÖs designed to scale from simple projects to complex applications handling thousands of users. ­ƒôè\r\n\r\n4. **DRY Principle**: Stands for ÔÇ£DonÔÇÖt Repeat Yourself.ÔÇØ DjangoÔÇÖs design encourages reuse of code, making development faster and easier. ­ƒÅù´©Å\r\n\r\n5. **Vibrant Community**: Django has a large, active community of developers who contribute to improving the framework, building packages, and creating plugins. If you have a problem, thereÔÇÖs always someone who can help! ­ƒñØ\r\n\r\n## ­ƒÅù´©Å The Django Architecture: MTV Explained\r\n\r\nDjango follows an architecture pattern called **MTV** ÔÇô which stands for **Model-Template-View**. It is similar to the MVC (Model-View-Controller) pattern but tailored specifically to web development with Django.\r\n\r\n### ­ƒöì Understanding MTV\r\n\r\n1. **Model (M)** ­ƒùä´©Å  \r\n   - Think of models as blueprints for your data. They define the structure of your database tables and include all the essential fields and behaviors of the data you store.  \r\n   - Example: A `Product` model might have fields like `name`, `price`, and `description`.  \r\n   - Models are Python classes that Django translates into database queries automatically. ­ƒÜÇ\r\n\r\n2. **Template (T)** ­ƒûî´©Å  \r\n   - Templates are like the paint and canvas of your web page. They define how data is displayed to the user.  \r\n   - They consist of HTML and special template language syntax to dynamically display content.  \r\n   - Example: A template for a blog post page might include placeholders for the title, content, and author name. ­ƒôØ\r\n\r\n3. **View (V)** ­ƒºæÔÇì­ƒÆ╗  \r\n   - Views are the bridge between the **Model** and the **Template**. They process requests, get data from the models, and pass that data to the templates.  \r\n   - A view is a Python function that takes a web request and returns a web response.  \r\n   - Example: A view can fetch all posts from the database and pass them to a template to display as a list on a web page. ­ƒô£\r\n\r\n### ­ƒÆí So, How is MTV Different from MVC?\r\n\r\n- **Model (M)** is the same in both.\r\n- **Template (T)** in Django replaces the **View** in MVC. ItÔÇÖs responsible for the HTML and presentation layer.\r\n- **View (V)** in Django is more like the **Controller** in MVC. It handles the business logic and ties everything together.\r\n\r\nIn short, Django keeps things simple and intuitive by focusing on **\"Templates\"** to handle what the user sees and **\"Views\"** to control the data flow and application logic.\r\n\r\n## ­ƒîƒ Why Choose Django?\r\n\r\n1. **Rapid Development**: Helps you develop applications quickly, meeting tight deadlines. ÔÅ░\r\n2. **Clean and Readable Code**: Encourages best practices and makes your code easier to maintain and extend. ­ƒº╣\r\n3. **Versatility**: Suitable for both small projects and large-scale applications ÔÇô think of everything from blogs to social media platforms to e-commerce sites. ­ƒøÆ\r\n4. **Admin Interface**: Out-of-the-box, customizable admin interface for managing your siteÔÇÖs data without writing extra code. ­ƒôè\r\n\r\n## ­ƒÄ» Final Thoughts\r\n\r\nDjango is more than just a framework ÔÇô it's a complete toolkit for web development. With its ÔÇ£batteries-includedÔÇØ philosophy, robust security features, and a massive community of developers, itÔÇÖs no wonder Django is the framework of choice for companies like Instagram, Pinterest, and even NASA! ­ƒÜÇ\r\n\r\nSo, are you ready to build something amazing with Django? ­ƒîƒ LetÔÇÖs get coding!\r\n\r\n---\r\n\r\n> \"With Django, you can do more in less time, and with fewer lines of code!\" ÔÇô Python Enthusiasts ­ƒÆ¼",
      "uploaded_by": 1,
      "created_at": "2024-09-01T20:02:48.628Z",
      "auto_slug": "introduction-to-django-2",
      "topics": [151]
    }
  },
  {
    "model": "main.note",
    "pk": 3,
    "fields": {
      "title": "­ƒôí Live Chat with Django Channels: A Fun Guide",
      "content": "Welcome to the magical world of live chat with Django Channels! ­ƒÜÇ Imagine your Django app is a chatty party where everyone is talking in real time. This guide will turn you into the DJ of this party, making sure everyone gets the groove!\r\n\r\n## ­ƒÄë What are Django Channels?\r\n\r\nDjango Channels is like the superpower you never knew you needed! ­ƒÆ¬ While Django itself is great for handling web requests, Channels adds the magic of WebSockets, making your app capable of real-time communication. Think of it as DjangoÔÇÖs way of saying, \"Hey, letÔÇÖs chat in real-time!\"\r\n\r\n## ­ƒôª Installing Django Channels\r\n\r\nFirst things first, letÔÇÖs get Django Channels into our project. ­ƒøá´©Å Open your terminal and run:\r\n\r\n```bash\r\npip install channels\r\n```\r\n\r\n## ÔÜÖ´©Å Configuring Django Channels\r\n\r\nNow, let's configure Django Channels in your Django project. Follow these steps to make your project chat-ready:\r\n\r\n1. **Add Channels to Installed Apps**  \r\n   Open your `settings.py` and add `'channels'` to your `INSTALLED_APPS` list:\r\n\r\n```python\r\n   INSTALLED_APPS = [\r\n       # ... your other apps\r\n       'channels',\r\n   ]\r\n```\r\n\r\n2. **Specify the ASGI Application**  \r\n   Still in `settings.py`, set the `ASGI_APPLICATION` to point to your routing configuration:\r\n\r\n```python\r\n   ASGI_APPLICATION = 'your_project_name.asgi.application'\r\n```\r\n\r\n   Replace `your_project_name` with the name of your Django project.\r\n\r\n3. **Create the ASGI Configuration**  \r\n   Create a file named `asgi.py` in your project directory and add the following code:\r\n\r\n```python\r\n   import os\r\n   from django.core.asgi import get_asgi_application\r\n   from channels.routing import ProtocolTypeRouter, URLRouter\r\n   from channels.auth import AuthMiddlewareStack\r\n   from channels.security.websocket import AllowedHostsOriginValidator\r\n   from your_app_name import routing\r\n\r\n   os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project_name.settings')\r\n\r\n   application = ProtocolTypeRouter({\r\n       \"http\": get_asgi_application(),\r\n       \"websocket\": AllowedHostsOriginValidator(\r\n           AuthMiddlewareStack(\r\n               URLRouter(\r\n                   routing.websocket_urlpatterns\r\n               )\r\n           )\r\n       ),\r\n   })\r\n```\r\n\r\n   Make sure to replace `your_app_name` and `your_project_name` with the appropriate names.\r\n\r\n## ­ƒù║´©Å Setting Up Routing\r\n\r\nCreate a file named `routing.py` in your app directory and add:\r\n\r\n```python\r\nfrom django.urls import re_path\r\nfrom . import consumers\r\n\r\nwebsocket_urlpatterns = [\r\n    re_path(r'ws/chat/(?P<room_name>\\w+)/$', consumers.ChatConsumer.as_asgi()),\r\n]\r\n```\r\n\r\n## ­ƒùú´©Å Creating the Consumer\r\n\r\nThe consumer is like the DJ booth where all the magic happens. Create a file named `consumers.py` in your app directory and add:\r\n\r\n```python\r\nimport json\r\nfrom channels.generic.websocket import AsyncWebsocketConsumer\r\n\r\nclass ChatConsumer(AsyncWebsocketConsumer):\r\n    async def connect(self):\r\n        self.room_name = self.scope['url_route']['kwargs']['room_name']\r\n        self.room_group_name = f'chat_{self.room_name}'\r\n\r\n        await self.channel_layer.group_add(\r\n            self.room_group_name,\r\n            self.channel_name\r\n        )\r\n\r\n        await self.accept()\r\n\r\n    async def disconnect(self, close_code):\r\n        await self.channel_layer.group_discard(\r\n            self.room_group_name,\r\n            self.channel_name\r\n        )\r\n\r\n    async def receive(self, text_data):\r\n        text_data_json = json.loads(text_data)\r\n        message = text_data_json['message']\r\n\r\n        await self.channel_layer.group_send(\r\n            self.room_group_name,\r\n            {\r\n                'type': 'chat_message',\r\n                'message': message\r\n            }\r\n        )\r\n\r\n    async def chat_message(self, event):\r\n        message = event['message']\r\n\r\n        await self.send(text_data=json.dumps({\r\n            'message': message\r\n        }))\r\n```\r\n\r\n## ­ƒÅù´©Å Building the Frontend\r\n\r\nTime to make your chat look snazzy! ­ƒÄ¿ Create a simple HTML file, `chat.html`, for the frontend:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Chat Room</title>\r\n</head>\r\n<body>\r\n    <h1>Chat Room: {{ room_name }}</h1>\r\n    <div id=\"chat-log\"></div>\r\n    <input id=\"chat-message-input\" type=\"text\" size=\"100\" autofocus />\r\n    <button id=\"chat-message-submit\">Send</button>\r\n\r\n    <script>\r\n        const roomName = \"{{ room_name }}\";\r\n        const chatSocket = new WebSocket(\r\n            'ws://' + window.location.host + '/ws/chat/' + roomName + '/'\r\n        );\r\n\r\n        chatSocket.onmessage = function(e) {\r\n            const data = JSON.parse(e.data);\r\n            document.querySelector('#chat-log').innerHTML += (data.message + '<br>');\r\n        };\r\n\r\n        chatSocket.onclose = function(e) {\r\n            console.error('Chat socket closed unexpectedly');\r\n        };\r\n\r\n        document.querySelector('#chat-message-input').focus();\r\n        document.querySelector('#chat-message-submit').onclick = function(e) {\r\n            const messageInputDom = document.querySelector('#chat-message-input');\r\n            const message = messageInputDom.value;\r\n            chatSocket.send(JSON.stringify({\r\n                'message': message\r\n            }));\r\n            messageInputDom.value = '';\r\n        };\r\n    </script>\r\n</body>\r\n</html>\r\n```\r\n\r\n## ­ƒÄè You're Done!\r\n\r\nCongratulations! ­ƒÄë You now have a live chat feature in your Django app. Your users can chat in real-time, and youÔÇÖre officially a chatroom DJ! ­ƒò║­ƒÆâ\r\n\r\nFeel free to tweak and style everything to your heartÔÇÖs content. Happy chatting! ­ƒù¿´©ÅÔ£¿\r\n\r\n---",
      "uploaded_by": 1,
      "created_at": "2024-09-02T18:53:22.768Z",
      "auto_slug": "live-chat-with-django-channels-a-fun-guide",
      "topics": [172]
    }
  },
  {
    "model": "main.note",
    "pk": 4,
    "fields": {
      "title": "­ƒôÜ Pandas Guide: From Basics to Advanced",
      "content": "Welcome to the Pandas library guide! Whether you're just starting out or looking to refine your skills, this guide will walk you through Pandas functions with a splash of fun. ­ƒÿä\r\n\r\n## ­ƒÉ╝ What is Pandas?\r\n\r\nPandas is a powerful library for data manipulation and analysis in Python. It provides data structures like `DataFrame` and `Series` to handle data efficiently. Let's dive into its features!\r\n\r\n---\r\n\r\n## ­ƒôª Getting Started\r\n\r\nFirst things first, let's import Pandas:\r\n\r\n```python\r\nimport pandas as pd\r\n```\r\n\r\n---\r\n\r\n## ­ƒùé´©Å Creating DataFrames\r\n\r\n### From a Dictionary\r\n\r\n```python\r\ndata = {\r\n    'Name': ['Alice', 'Bob', 'Charlie'],\r\n    'Age': [25, 30, 35],\r\n    'City': ['New York', 'Los Angeles', 'Chicago']\r\n}\r\n\r\ndf = pd.DataFrame(data)\r\nprint(df)\r\n```\r\n\r\n### From a CSV File\r\n\r\n```python\r\ndf = pd.read_csv('file.csv')\r\nprint(df.head())  # Display the first 5 rows\r\n```\r\n\r\n---\r\n\r\n## ­ƒöì Exploring DataFrames\r\n\r\n### Viewing Data\r\n\r\n- **First and Last Rows**\r\n\r\n```python\r\nprint(df.head())  # First 5 rows\r\nprint(df.tail())  # Last 5 rows\r\n```\r\n\r\n- **DataFrame Shape**\r\n\r\n```python\r\nprint(df.shape)  # (rows, columns)\r\n```\r\n\r\n- **Column Names**\r\n\r\n```python\r\nprint(df.columns)\r\n```\r\n\r\n- **Summary Statistics**\r\n\r\n```python\r\nprint(df.describe())\r\n```\r\n\r\n### Data Selection\r\n\r\n- **Selecting Columns**\r\n\r\n```python\r\nprint(df['Name'])  # Single column\r\nprint(df[['Name', 'Age']])  # Multiple columns\r\n```\r\n\r\n- **Selecting Rows by Index**\r\n\r\n```python\r\nprint(df.iloc[0])  # First row\r\nprint(df.loc[0])   # Row by label (if index is labeled)\r\n```\r\n\r\n- **Conditional Selection**\r\n\r\n```python\r\nprint(df[df['Age'] > 30])\r\n```\r\n\r\n---\r\n\r\n## Ô£Å´©Å Data Cleaning\r\n\r\n### Handling Missing Values\r\n\r\n- **Drop Missing Values**\r\n\r\n```python\r\ndf_cleaned = df.dropna()\r\n```\r\n\r\n- **Fill Missing Values**\r\n\r\n```python\r\ndf_filled = df.fillna(value={'Age': df['Age'].mean()})\r\n```\r\n\r\n### Removing Duplicates\r\n\r\n```python\r\ndf_unique = df.drop_duplicates()\r\n```\r\n\r\n---\r\n\r\n## ­ƒöä Data Manipulation\r\n\r\n### Adding and Removing Columns\r\n\r\n- **Add Column**\r\n\r\n```python\r\ndf['Country'] = ['USA', 'USA', 'USA']\r\n```\r\n\r\n- **Remove Column**\r\n\r\n```python\r\ndf = df.drop(columns=['Country'])\r\n```\r\n\r\n### Renaming Columns\r\n\r\n```python\r\ndf.rename(columns={'Name': 'Full Name'}, inplace=True)\r\n```\r\n\r\n### Changing Data Types\r\n\r\n```python\r\ndf['Age'] = df['Age'].astype(float)\r\n```\r\n\r\n---\r\n\r\n## ­ƒôè Data Aggregation\r\n\r\n### Grouping Data\r\n\r\n```python\r\ngrouped = df.groupby('City')\r\nprint(grouped['Age'].mean())  # Mean age per city\r\n```\r\n\r\n### Aggregation Functions\r\n\r\n```python\r\nagg_data = df.agg({\r\n    'Age': ['mean', 'max', 'min'],\r\n    'City': 'count'\r\n})\r\n```\r\n\r\n---\r\n\r\n## ­ƒôê Data Visualization\r\n\r\n### Plotting with Pandas\r\n\r\n```python\r\ndf.plot(kind='bar', x='Name', y='Age')\r\n```\r\n\r\n### Customizing Plots\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\ndf.plot(kind='line', x='Age', y='City')\r\nplt.title('Age vs. City')\r\nplt.xlabel('Age')\r\nplt.ylabel('City')\r\nplt.show()\r\n```\r\n\r\n---\r\n\r\n## ­ƒôà Date and Time Handling\r\n\r\n### Parsing Dates\r\n\r\n```python\r\ndf['Date'] = pd.to_datetime(df['Date'])\r\n```\r\n\r\n### Extracting Date Components\r\n\r\n```python\r\ndf['Year'] = df['Date'].dt.year\r\ndf['Month'] = df['Date'].dt.month\r\n```\r\n\r\n---\r\n\r\n## ­ƒº® Advanced Topics\r\n\r\n### Merging DataFrames\r\n\r\n- **Merge on Key**\r\n\r\n```python\r\ndf_merged = pd.merge(df1, df2, on='key')\r\n```\r\n\r\n- **Join DataFrames**\r\n\r\n```python\r\ndf_joined = df1.join(df2, lsuffix='_left', rsuffix='_right')\r\n```\r\n\r\n### Pivot Tables\r\n\r\n```python\r\npivot_table = pd.pivot_table(df, values='Age', index='City', aggfunc='mean')\r\n```\r\n\r\n### Reshaping Data\r\n\r\n- **Pivot**\r\n\r\n```python\r\npivot_df = df.pivot(index='Date', columns='City', values='Age')\r\n```\r\n\r\n- **Melt**\r\n\r\n```python\r\nmelted_df = pd.melt(df, id_vars=['Name'], value_vars=['Age', 'City'])\r\n```\r\n\r\n---\r\n\r\n## ­ƒöº Useful Functions\r\n\r\n### Apply and Lambda\r\n\r\n```python\r\ndf['Age'] = df['Age'].apply(lambda x: x + 1)  # Increase age by 1\r\n```\r\n\r\n### String Methods\r\n\r\n```python\r\ndf['Name'] = df['Name'].str.upper()  # Convert names to uppercase\r\n```\r\n\r\n### DataFrame to Dictionary\r\n\r\n```python\r\ndf_dict = df.to_dict()\r\n```\r\n\r\n---\r\n\r\n## ­ƒÄô Summary\r\n\r\nYouÔÇÖve just scratched the surface of what Pandas can do. HereÔÇÖs a quick recap of the key functions:\r\n\r\n- **Creating DataFrames:** `pd.DataFrame()`, `pd.read_csv()`\r\n- **Exploring DataFrames:** `head()`, `tail()`, `shape`, `describe()`\r\n- **Data Cleaning:** `dropna()`, `fillna()`, `drop_duplicates()`\r\n- **Data Manipulation:** `drop()`, `rename()`, `astype()`\r\n- **Aggregation:** `groupby()`, `agg()`\r\n- **Visualization:** `plot()`\r\n- **Date Handling:** `pd.to_datetime()`, `.dt`\r\n- **Advanced Topics:** `merge()`, `pivot_table()`, `pivot()`, `melt()`\r\n- **Useful Functions:** `apply()`, `str`, `to_dict()`\r\n\r\nHappy Pandas-ing! ­ƒÉ╝Ô£¿\r\n\r\n---",
      "uploaded_by": 1,
      "created_at": "2024-09-02T19:23:04.178Z",
      "auto_slug": "pandas-guide-from-basics-to-advanced",
      "topics": [71]
    }
  },
  {
    "model": "main.note",
    "pk": 5,
    "fields": {
      "title": "­ƒôÜ jQuery Fundamentals Cheat Sheet",
      "content": "jQuery is a fast, small, and feature-rich JavaScript library that simplifies **HTML document traversal**, **event handling**, **animating**, and **Ajax interactions** for rapid web development. Let's get started! ­ƒÜÇ\r\n\r\n---\r\n\r\n## ­ƒîƒ Getting Started with jQuery\r\n\r\n### ­ƒôÑ Include jQuery in Your Project\r\n\r\nTo use jQuery, you need to include the library in your HTML file. You can either download it or use a **CDN (Content Delivery Network)**.\r\n\r\n**Include jQuery using a CDN:**\r\n\r\n```html\r\n<!-- Latest minified jQuery version -->\r\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n```\r\n\r\nNow you're all set to use jQuery! ­ƒÄë\r\n\r\n---\r\n\r\n## Ô£¿ Basic Syntax\r\n\r\nThe jQuery syntax is designed to make things easier. The syntax is:\r\n\r\n```javascript\r\n$(selector).action();\r\n```\r\n\r\n- **`$`**: Refers to jQuery.\r\n- **`selector`**: HTML element(s) you want to select.\r\n- **`action`**: A jQuery action you want to perform on the element(s).\r\n\r\n### Example:\r\n\r\n```html\r\n<!-- HTML Button -->\r\n<button id=\"myButton\">Click me</button>\r\n\r\n<!-- jQuery to hide the button on click -->\r\n<script>\r\n  $(document).ready(function () {\r\n    $('#myButton').click(function () {\r\n      $(this).hide(); // Hides the button on click\r\n    });\r\n  });\r\n</script>\r\n```\r\n\r\n### ­ƒÄ» Document Ready\r\n\r\nEnsure that the DOM is fully loaded before running your jQuery code using:\r\n\r\n```javascript\r\n$(document).ready(function () {\r\n  // Your jQuery code here\r\n});\r\n```\r\n\r\nOr a shorter version:\r\n\r\n```javascript\r\n$(function () {\r\n  // Your jQuery code here\r\n});\r\n```\r\n\r\n---\r\n\r\n## ­ƒöì jQuery Selectors\r\n\r\njQuery selectors allow you to select and manipulate HTML elements. They are similar to CSS selectors.\r\n\r\n### ­ƒöû Common Selectors:\r\n\r\n| Selector      | Description                                     | Example                      |\r\n|---------------|-------------------------------------------------|------------------------------|\r\n| `*`           | Selects all elements                            | `$(\" * \")`                   |\r\n| `#id`         | Selects element with the specified ID           | `$(\"#myId\")`                 |\r\n| `.class`      | Selects all elements with the specified class    | `$(\".myClass\")`              |\r\n| `element`     | Selects all elements with the given tag name     | `$(\"p\")`                     |\r\n| `:first`      | Selects the first matched element               | `$(\"p:first\")`               |\r\n| `[attribute]` | Selects elements with a specific attribute      | `$(\"input[name='name']\")`    |\r\n\r\n### Example:\r\n\r\n```html\r\n<!-- HTML Paragraphs -->\r\n<p>First paragraph</p>\r\n<p class=\"highlight\">Second paragraph</p>\r\n<p id=\"special\">Third paragraph</p>\r\n\r\n<!-- jQuery to apply styles -->\r\n<script>\r\n  $(document).ready(function () {\r\n    $(\"p\").css(\"color\", \"blue\"); // All paragraphs turn blue\r\n    $(\".highlight\").css(\"font-weight\", \"bold\"); // Bold the class 'highlight'\r\n    $(\"#special\").css(\"font-size\", \"20px\"); // Increase font size of ID 'special'\r\n  });\r\n</script>\r\n```\r\n\r\n---\r\n\r\n## ­ƒÄ¼ Event Handling\r\n\r\njQuery makes handling events simple and intuitive. Here are some common event methods:\r\n\r\n- **`click()`**: Triggered when an element is clicked.\r\n- **`hover()`**: A combination of `mouseenter` and `mouseleave`.\r\n- **`focus()`**: Triggered when an element gains focus.\r\n- **`blur()`**: Triggered when an element loses focus.\r\n\r\n### Example:\r\n\r\n```html\r\n<!-- HTML Input -->\r\n<input type=\"text\" id=\"inputField\" placeholder=\"Type here\">\r\n\r\n<!-- jQuery for Event Handling -->\r\n<script>\r\n  $(document).ready(function () {\r\n    $(\"#inputField\").focus(function () {\r\n      $(this).css(\"background-color\", \"#e0f7fa\");\r\n    });\r\n    $(\"#inputField\").blur(function () {\r\n      $(this).css(\"background-color\", \"#ffffff\");\r\n    });\r\n  });\r\n</script>\r\n```\r\n\r\n---\r\n\r\n## ­ƒøá´©Å DOM Manipulation\r\n\r\njQuery makes it easy to manipulate the DOM.\r\n\r\n### Ô£Å´©Å Modifying Content:\r\n\r\n- **`text()`**: Sets or returns the text content.\r\n- **`html()`**: Sets or returns the HTML content.\r\n- **`val()`**: Sets or returns the value of form fields.\r\n\r\n### Example:\r\n\r\n```html\r\n<!-- HTML Content -->\r\n<p id=\"demo\">Hello World!</p>\r\n\r\n<!-- jQuery to Change Content -->\r\n<script>\r\n  $(document).ready(function () {\r\n    $(\"#demo\").text(\"Hello jQuery!\"); // Changes text content\r\n    $(\"#demo\").html(\"<b>Hello jQuery!</b>\"); // Changes HTML content\r\n  });\r\n</script>\r\n```\r\n\r\n### ­ƒî▓ Adding and Removing Elements:\r\n\r\n- **`append()`**: Adds content to the end.\r\n- **`prepend()`**: Adds content to the beginning.\r\n- **`remove()`**: Removes selected elements.\r\n- **`empty()`**: Removes child elements of the selected element.\r\n\r\n### Example:\r\n\r\n```html\r\n<!-- HTML List -->\r\n<ul id=\"fruits\">\r\n  <li>Apple</li>\r\n  <li>Banana</li>\r\n</ul>\r\n\r\n<!-- jQuery to Manipulate List -->\r\n<script>\r\n  $(document).ready(function () {\r\n    $(\"#fruits\").append(\"<li>Cherry</li>\"); // Adds 'Cherry' to the end\r\n    $(\"#fruits\").prepend(\"<li>Mango</li>\"); // Adds 'Mango' to the beginning\r\n    $(\"#fruits li:first\").remove(); // Removes the first item\r\n  });\r\n</script>\r\n```\r\n\r\n---\r\n\r\n## ­ƒÄ¿ Animations and Effects\r\n\r\njQuery comes with built-in animation methods.\r\n\r\n### Ô£¿ Common Effects:\r\n\r\n- **`show(speed, callback)`**: Shows the selected elements.\r\n- **`hide(speed, callback)`**: Hides the selected elements.\r\n- **`toggle(speed, callback)`**: Toggles between showing and hiding.\r\n- **`fadeIn(speed, callback)`**: Fades in the selected elements.\r\n- **`fadeOut(speed, callback)`**: Fades out the selected elements.\r\n- **`slideDown(speed, callback)`**: Slides down the selected elements.\r\n- **`slideUp(speed, callback)`**: Slides up the selected elements.\r\n\r\n### Example:\r\n\r\n```html\r\n<!-- HTML Button -->\r\n<button id=\"toggleButton\">Toggle</button>\r\n<p id=\"toggleText\">This is a paragraph.</p>\r\n\r\n<!-- jQuery for Animation -->\r\n<script>\r\n  $(document).ready(function () {\r\n    $(\"#toggleButton\").click(function () {\r\n      $(\"#toggleText\").toggle(1000); // Toggles the visibility of the paragraph\r\n    });\r\n  });\r\n</script>\r\n```\r\n\r\n---\r\n\r\n## ­ƒÜÇ Advanced jQuery\r\n\r\n### ­ƒîÉ AJAX with jQuery\r\n\r\nAJAX allows for asynchronous web requests, and jQuery makes it simple!\r\n\r\n#### `$.ajax()` Method:\r\n\r\n```javascript\r\n$.ajax({\r\n  url: \"https://api.example.com/data\",\r\n  method: \"GET\",\r\n  success: function (data) {\r\n    console.log(data); // Process data on success\r\n  },\r\n  error: function (error) {\r\n    console.error(\"Error fetching data:\", error);\r\n  }\r\n});\r\n```\r\n\r\n#### Shorthand Methods:\r\n\r\n- **`$.get(url, success)`**: GET request.\r\n- **`$.post(url, data, success)`**: POST request.\r\n\r\n### Example:\r\n\r\n```javascript\r\n$.get(\"https://api.example.com/data\", function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n### ­ƒöü Chaining\r\n\r\njQuery allows method chaining for cleaner code:\r\n\r\n```javascript\r\n$(\"#myElement\").css(\"color\", \"blue\").slideUp(2000).slideDown(2000);\r\n```\r\n\r\n### ­ƒº® Plugins\r\n\r\nYou can extend jQuery using plugins for additional functionality. To use a plugin, include it after the jQuery script.\r\n\r\n---\r\n\r\n## ­ƒöì Debugging Tips\r\n\r\n- Use **`console.log()`** to print messages and debug.\r\n- Use browser developer tools to inspect the DOM and understand your jQuery code.\r\n\r\n### ­ƒøá´©Å Performance Tips\r\n\r\n- Minimize the number of selectors.\r\n- Use **IDs** over **classes** for faster selections.\r\n- Cache jQuery selectors to avoid redundancy.\r\n\r\n### ÔÜí Conclusion\r\n\r\njQuery is a powerful tool for web development. Its easy-to-understand syntax, rich features, and ability to extend functionality using plugins make it a popular choice among developers. Keep experimenting and building! ­ƒîê",
      "uploaded_by": 2,
      "created_at": "2024-09-10T20:57:12.802Z",
      "auto_slug": "jquery-fundamentals-cheat-sheet",
      "topics": [264]
    }
  },
  {
    "model": "main.note",
    "pk": 6,
    "fields": {
      "title": "Intro to Jquery and Jquery Selectors",
      "content": "### 1. **Introduction to jQuery**\r\n\r\n#### What is jQuery?\r\njQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. It was designed to simplify client-side scripting and provide a unified approach to interacting with the DOM (Document Object Model), ensuring that developers donÔÇÖt have to write browser-specific code.\r\n\r\n**Key Features of jQuery**:\r\n- **Cross-browser compatibility**: jQuery abstracts away browser-specific differences.\r\n- **DOM manipulation**: Simplifies tasks like modifying HTML content, styling, and element structures.\r\n- **Event handling**: Simplifies the process of handling user events like clicks, mouseovers, and form submissions.\r\n- **AJAX support**: Provides functions for making asynchronous requests to the server.\r\n- **Animation**: Allows the creation of smooth, dynamic animations.\r\n\r\n#### Importance of jQuery in Web Development\r\njQuery plays an essential role in web development because it:\r\n- **Reduces development time**: By providing simple methods to interact with the DOM, handle events, and animate elements, jQuery reduces the amount of code developers need to write.\r\n- **Cross-browser compatibility**: With jQuery, developers don't need to worry about JavaScript behaving differently across different browsers.\r\n- **Simplifies AJAX**: jQuery makes it straightforward to load external data dynamically without reloading the page.\r\n- **Rich Ecosystem**: There is a vast library of plugins, tools, and extensions built on jQuery, making it easier to add advanced features (like carousels, modals, etc.) to websites without reinventing the wheel.\r\n  \r\n**Example**:  \r\nIn native JavaScript, changing the text of an element might look like this:\r\n```javascript\r\ndocument.getElementById('myElement').innerHTML = \"Hello, World!\";\r\n```\r\n\r\nWith jQuery, you can achieve the same with:\r\n```javascript\r\n$('#myElement').html(\"Hello, World!\");\r\n```\r\n\r\n#### Including jQuery in a Web Page\r\nTo use jQuery, you need to include it in your webpage, either by downloading the library and hosting it yourself or by using a CDN (Content Delivery Network).\r\n\r\n**Including via CDN**:\r\nYou can add jQuery to your HTML by adding this line inside the `<head>` or just before the closing `</body>` tag:\r\n```html\r\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n```\r\n\r\nAlternatively, you can download jQuery and include it like this:\r\n```html\r\n<script src=\"path/to/jquery.min.js\"></script>\r\n```\r\n\r\nOnce jQuery is included, you can start using its functionality in your script.\r\n\r\n---\r\n\r\n### Mini Project: **Simple Website with jQuery Integration**\r\n**Goal**: Build a static webpage and use jQuery to manipulate the DOM.\r\n\r\n1. Create a simple HTML page:\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Simple jQuery Webpage</title>\r\n</head>\r\n<body>\r\n    <h1 id=\"title\">Welcome to My jQuery Webpage</h1>\r\n    <button id=\"changeText\">Change Text</button>\r\n    <button id=\"changeColor\">Change Color</button>\r\n    <button id=\"toggleElement\">Hide/Show Title</button>\r\n\r\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n    <script>\r\n        $(document).ready(function() {\r\n            // Change text on button click\r\n            $('#changeText').click(function() {\r\n                $('#title').text(\"Text Changed using jQuery!\");\r\n            });\r\n\r\n            // Change color on button click\r\n            $('#changeColor').click(function() {\r\n                $('#title').css('color', 'blue');\r\n            });\r\n\r\n            // Toggle visibility on button click\r\n            $('#toggleElement').click(function() {\r\n                $('#title').toggle();\r\n            });\r\n        });\r\n    </script>\r\n</body>\r\n</html>\r\n```\r\n\r\n**Explanation**:\r\n- **HTML Structure**: You have a title and three buttons. Each button performs a different jQuery action.\r\n- **Change Text**: Clicking the ÔÇ£Change TextÔÇØ button changes the text of the title.\r\n- **Change Color**: Clicking the ÔÇ£Change ColorÔÇØ button changes the color of the title to blue.\r\n- **Toggle Visibility**: The ÔÇ£Hide/Show TitleÔÇØ button hides or shows the title using the `.toggle()` method.\r\n\r\n---\r\n\r\n### 2. **jQuery Selectors**\r\n\r\nSelectors in jQuery allow you to find and manipulate HTML elements based on their attributes, tags, IDs, classes, and more. jQuery selectors are designed to be concise and powerful.\r\n\r\n#### Basic Selectors\r\n- **ID Selector (`#id`)**: Selects an element by its ID.  \r\n  Example:\r\n  ```javascript\r\n  $('#myElement').text(\"This is selected by ID\");\r\n  ```\r\n\r\n- **Class Selector (`.class`)**: Selects all elements with the specified class.  \r\n  Example:\r\n  ```javascript\r\n  $('.myClass').css('background-color', 'yellow');\r\n  ```\r\n\r\n- **Tag Selector (`tag`)**: Selects all elements of a given tag type (e.g., `p`, `div`, etc.).  \r\n  Example:\r\n  ```javascript\r\n  $('p').css('font-size', '18px');\r\n  ```\r\n\r\n#### Attribute Selectors\r\njQuery allows you to select elements based on their attributes. This is useful when targeting elements with specific properties.\r\n\r\n- **Attribute Exists Selector (`[attribute]`)**: Selects all elements with a specific attribute.  \r\n  Example:\r\n  ```javascript\r\n  $('img[alt]').css('border', '1px solid red');\r\n  ```\r\n\r\n- **Attribute Value Selector (`[attribute=value]`)**: Selects elements that have an attribute with a specific value.  \r\n  Example:\r\n  ```javascript\r\n  $('input[type=\"text\"]').val('Default Text');\r\n  ```\r\n\r\n#### Child and Sibling Selectors\r\n- **Child Selector (`parent > child`)**: Selects direct child elements of a specific parent.  \r\n  Example:\r\n  ```javascript\r\n  $('ul > li').css('color', 'green');\r\n  ```\r\n\r\n- **Sibling Selector (`prev + next`)**: Selects the next sibling of an element.  \r\n  Example:\r\n  ```javascript\r\n  $('h2 + p').css('font-weight', 'bold');\r\n  ```\r\n\r\n#### Mini Project: **Image Gallery**\r\n**Goal**: Create an image gallery where clicking on thumbnails changes the main image using jQuery selectors.\r\n\r\n1. HTML structure for the image gallery:\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>jQuery Image Gallery</title>\r\n    <style>\r\n        .thumbnails img {\r\n            width: 100px;\r\n            cursor: pointer;\r\n        }\r\n        #mainImage {\r\n            width: 400px;\r\n            display: block;\r\n            margin-bottom: 10px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <h1>jQuery Image Gallery</h1>\r\n    <img id=\"mainImage\" src=\"image1.jpg\" alt=\"Main Image\">\r\n    \r\n    <div class=\"thumbnails\">\r\n        <img src=\"image1.jpg\" alt=\"Thumbnail 1\">\r\n        <img src=\"image2.jpg\" alt=\"Thumbnail 2\">\r\n        <img src=\"image3.jpg\" alt=\"Thumbnail 3\">\r\n    </div>\r\n\r\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n    <script>\r\n        $(document).ready(function() {\r\n            // Change main image on thumbnail click\r\n            $('.thumbnails img').click(function() {\r\n                var newSrc = $(this).attr('src');\r\n                $('#mainImage').attr('src', newSrc);\r\n            });\r\n        });\r\n    </script>\r\n</body>\r\n</html>\r\n```\r\n\r\n**Explanation**:\r\n- **HTML Structure**: A main image is displayed at the top, and below it, there are several thumbnail images.\r\n- **jQuery Selector**: When any thumbnail is clicked, the source (`src`) of the clicked image is retrieved and used to update the `src` attribute of the main image.",
      "uploaded_by": 2,
      "created_at": "2024-09-17T17:50:58.145Z",
      "auto_slug": "intro-to-jquery-and-jquery-selectors",
      "topics": [264]
    }
  },
  {
    "model": "main.note",
    "pk": 7,
    "fields": {
      "title": "jQuery Events",
      "content": "### 3. **jQuery Events**\r\n\r\nIn jQuery, events refer to the actions or occurrences that happen in the browser (like mouse clicks, key presses, and page loads) to which you can respond using JavaScript. jQuery simplifies handling events by providing a uniform interface to interact with them across different browsers. \r\n\r\n#### Mouse Events\r\nMouse events are triggered when the user interacts with elements using the mouse (or other pointing devices). Common mouse events include:\r\n\r\n1. **click**: Fired when an element is clicked.\r\n    ```javascript\r\n    $('#button').click(function() {\r\n        alert('Button clicked!');\r\n    });\r\n    ```\r\n\r\n2. **dblclick**: Fired when an element is double-clicked.\r\n    ```javascript\r\n    $('#element').dblclick(function() {\r\n        $(this).css('color', 'red');\r\n    });\r\n    ```\r\n\r\n3. **hover**: Fired when the mouse pointer enters and leaves an element. Hover combines `mouseenter` and `mouseleave` events.\r\n    ```javascript\r\n    $('#element').hover(\r\n        function() {\r\n            $(this).css('background-color', 'yellow'); // mouse enter\r\n        },\r\n        function() {\r\n            $(this).css('background-color', ''); // mouse leave\r\n        }\r\n    );\r\n    ```\r\n\r\n4. **mousedown**: Fired when a mouse button is pressed.\r\n    ```javascript\r\n    $('#element').mousedown(function() {\r\n        $(this).css('border', '2px solid blue');\r\n    });\r\n    ```\r\n\r\n5. **mouseup**: Fired when the mouse button is released.\r\n    ```javascript\r\n    $('#element').mouseup(function() {\r\n        $(this).css('border', '');\r\n    });\r\n    ```\r\n\r\n#### Keyboard Events\r\nThese events capture user interaction with the keyboard. Common keyboard events include:\r\n\r\n1. **keypress**: Fired when a key is pressed down and released.\r\n    ```javascript\r\n    $('#input').keypress(function(event) {\r\n        alert('Key pressed: ' + event.key);\r\n    });\r\n    ```\r\n\r\n2. **keydown**: Fired when a key is pressed down.\r\n    ```javascript\r\n    $('#input').keydown(function(event) {\r\n        console.log('Key pressed: ' + event.key);\r\n    });\r\n    ```\r\n\r\n3. **keyup**: Fired when a key is released.\r\n    ```javascript\r\n    $('#input').keyup(function(event) {\r\n        console.log('Key released: ' + event.key);\r\n    });\r\n    ```\r\n\r\nThese events are commonly used in scenarios like real-time form validation, search as you type, and other dynamic interactions.\r\n\r\n#### Form Events\r\nForm events are triggered when users interact with HTML forms. These include events related to input fields and submission:\r\n\r\n1. **submit**: Fired when a form is submitted.\r\n    ```javascript\r\n    $('form').submit(function(event) {\r\n        event.preventDefault(); // Prevent form submission\r\n        alert('Form submitted!');\r\n    });\r\n    ```\r\n\r\n2. **focus**: Fired when an input field receives focus.\r\n    ```javascript\r\n    $('input').focus(function() {\r\n        $(this).css('background-color', '#f0f0f0');\r\n    });\r\n    ```\r\n\r\n3. **blur**: Fired when an input field loses focus.\r\n    ```javascript\r\n    $('input').blur(function() {\r\n        $(this).css('background-color', '');\r\n    });\r\n    ```\r\n\r\nThese form events are typically used to trigger real-time form validation, display hints, or adjust styling based on user input.\r\n\r\n#### Document Events\r\nDocument events refer to interactions with the entire document (or window) rather than individual elements.\r\n\r\n1. **ready**: Fired when the DOM (Document Object Model) is fully loaded. This is one of the most common events in jQuery and is used to ensure that jQuery code runs only after the page's content has been fully loaded.\r\n    ```javascript\r\n    $(document).ready(function() {\r\n        console.log(\"DOM is ready!\");\r\n    });\r\n    ```\r\n\r\n2. **load**: Fired when all elements on the page, including images, are fully loaded. \r\n    ```javascript\r\n    $(window).on('load', function() {\r\n        alert(\"All resources loaded, including images!\");\r\n    });\r\n    ```\r\n\r\n---\r\n\r\n### Mini Project: **Interactive Form Validation**\r\n\r\n**Goal**: Build a form that validates input fields in real-time using jQuery event handling. WeÔÇÖll validate email, password, and a confirm password field, ensuring that the data meets specific criteria before allowing submission.\r\n\r\n#### HTML Form\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Interactive Form Validation</title>\r\n    <style>\r\n        .error {\r\n            color: red;\r\n        }\r\n        .valid {\r\n            color: green;\r\n        }\r\n        input {\r\n            display: block;\r\n            margin-bottom: 10px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <h1>Registration Form</h1>\r\n    <form id=\"registrationForm\">\r\n        <label for=\"email\">Email:</label>\r\n        <input type=\"email\" id=\"email\" name=\"email\">\r\n        <span id=\"emailError\" class=\"error\"></span>\r\n\r\n        <label for=\"password\">Password:</label>\r\n        <input type=\"password\" id=\"password\" name=\"password\">\r\n        <span id=\"passwordError\" class=\"error\"></span>\r\n\r\n        <label for=\"confirmPassword\">Confirm Password:</label>\r\n        <input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\">\r\n        <span id=\"confirmPasswordError\" class=\"error\"></span>\r\n\r\n        <button type=\"submit\">Register</button>\r\n    </form>\r\n\r\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n    <script>\r\n        $(document).ready(function() {\r\n            // Email validation\r\n            $('#email').keyup(function() {\r\n                var email = $(this).val();\r\n                var emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\r\n                if (emailPattern.test(email)) {\r\n                    $('#emailError').text('Valid email').removeClass('error').addClass('valid');\r\n                } else {\r\n                    $('#emailError').text('Invalid email').removeClass('valid').addClass('error');\r\n                }\r\n            });\r\n\r\n            // Password validation\r\n            $('#password').keyup(function() {\r\n                var password = $(this).val();\r\n                if (password.length < 6) {\r\n                    $('#passwordError').text('Password must be at least 6 characters long').addClass('error');\r\n                } else {\r\n                    $('#passwordError').text('Valid password').removeClass('error').addClass('valid');\r\n                }\r\n            });\r\n\r\n            // Confirm Password validation\r\n            $('#confirmPassword').keyup(function() {\r\n                var password = $('#password').val();\r\n                var confirmPassword = $(this).val();\r\n                if (password !== confirmPassword) {\r\n                    $('#confirmPasswordError').text('Passwords do not match').addClass('error');\r\n                } else {\r\n                    $('#confirmPasswordError').text('Passwords match').removeClass('error').addClass('valid');\r\n                }\r\n            });\r\n\r\n            // Prevent form submission if validation fails\r\n            $('#registrationForm').submit(function(event) {\r\n                var emailError = $('#emailError').hasClass('error');\r\n                var passwordError = $('#passwordError').hasClass('error');\r\n                var confirmPasswordError = $('#confirmPasswordError').hasClass('error');\r\n                \r\n                if (emailError || passwordError || confirmPasswordError) {\r\n                    event.preventDefault();\r\n                    alert('Please fix the errors before submitting the form.');\r\n                } else {\r\n                    alert('Form submitted successfully!');\r\n                }\r\n            });\r\n        });\r\n    </script>\r\n</body>\r\n</html>\r\n```\r\n\r\n#### Explanation:\r\n- **Email Validation**: On every key press in the email field (`keyup` event), we check if the entered email matches a valid email pattern using a regular expression.\r\n- **Password Validation**: The password must be at least 6 characters long. We update the error message in real-time as the user types.\r\n- **Confirm Password Validation**: This checks whether the confirm password field matches the password field.\r\n- **Form Submission**: We use the `submit` event to check for any validation errors before allowing the form to be submitted. If errors are present, we prevent the form from being submitted and show an alert.\r\n\r\n**Key jQuery Features Used**:\r\n- **Event Handling**: `keyup` and `submit` to respond to user actions.\r\n- **Regular Expressions**: To validate the email format.\r\n- **Class Manipulation**: Dynamically adding or removing classes (`error` or `valid`) to show validation results.\r\n- **Real-time Feedback**: Updates the validation message as the user types.\r\n\r\nThis project illustrates how jQuery event handling can be used to create dynamic, real-time interactions in forms, improving the user experience.",
      "uploaded_by": 2,
      "created_at": "2024-09-17T17:51:44.661Z",
      "auto_slug": "jquery-events",
      "topics": [264]
    }
  },
  {
    "model": "main.note",
    "pk": 8,
    "fields": {
      "title": "jQuery Effects",
      "content": "### 4. **jQuery Effects**\r\n\r\njQuery provides several built-in effects that allow you to animate elements and create smooth transitions on your webpage. These effects can enhance user interaction and improve the visual appeal of your website without needing complex CSS or JavaScript.\r\n\r\n#### Show and Hide\r\n\r\n- **show()**: Displays the selected element if it is hidden.\r\n    ```javascript\r\n    $('#element').show();\r\n    ```\r\n    This method can be used to reveal an element that is hidden, either through CSS or JavaScript.\r\n\r\n- **hide()**: Hides the selected element.\r\n    ```javascript\r\n    $('#element').hide();\r\n    ```\r\n    When you want to make an element disappear from the page, `hide()` will do the job by setting the `display` property to `none`.\r\n\r\n##### Example:\r\n```html\r\n<button id=\"showBtn\">Show</button>\r\n<button id=\"hideBtn\">Hide</button>\r\n<div id=\"box\" style=\"width:100px; height:100px; background-color:blue; display:none;\"></div>\r\n\r\n<script>\r\n    $('#showBtn').click(function() {\r\n        $('#box').show();\r\n    });\r\n\r\n    $('#hideBtn').click(function() {\r\n        $('#box').hide();\r\n    });\r\n</script>\r\n```\r\nIn this example, clicking \"Show\" will display the blue box, and clicking \"Hide\" will make it disappear.\r\n\r\n#### Toggle\r\n\r\n- **toggle()**: Toggles between the `show()` and `hide()` states.\r\n    ```javascript\r\n    $('#element').toggle();\r\n    ```\r\n    If the element is visible, `toggle()` will hide it, and if it is hidden, it will show it.\r\n\r\n##### Example:\r\n```html\r\n<button id=\"toggleBtn\">Toggle Visibility</button>\r\n<div id=\"box\" style=\"width:100px; height:100px; background-color:red;\"></div>\r\n\r\n<script>\r\n    $('#toggleBtn').click(function() {\r\n        $('#box').toggle();\r\n    });\r\n</script>\r\n```\r\nClicking the \"Toggle Visibility\" button will either show or hide the box, depending on its current state.\r\n\r\n#### Fade Effects\r\n\r\n- **fadeIn()**: Gradually changes the opacity of an element to make it appear.\r\n    ```javascript\r\n    $('#element').fadeIn();\r\n    ```\r\n\r\n- **fadeOut()**: Gradually changes the opacity of an element to make it disappear.\r\n    ```javascript\r\n    $('#element').fadeOut();\r\n    ```\r\n\r\n- **fadeToggle()**: Toggles the `fadeIn()` and `fadeOut()` effects.\r\n    ```javascript\r\n    $('#element').fadeToggle();\r\n    ```\r\n\r\n##### Example:\r\n```html\r\n<button id=\"fadeBtn\">Fade In/Out</button>\r\n<div id=\"fadeBox\" style=\"width:100px; height:100px; background-color:green;\"></div>\r\n\r\n<script>\r\n    $('#fadeBtn').click(function() {\r\n        $('#fadeBox').fadeToggle();\r\n    });\r\n</script>\r\n```\r\nThis will apply a smooth fading effect to the green box whenever the button is clicked.\r\n\r\n#### Slide Effects\r\n\r\n- **slideUp()**: Hides an element with a sliding motion by reducing its height to 0.\r\n    ```javascript\r\n    $('#element').slideUp();\r\n    ```\r\n\r\n- **slideDown()**: Displays a hidden element with a sliding motion.\r\n    ```javascript\r\n    $('#element').slideDown();\r\n    ```\r\n\r\n- **slideToggle()**: Toggles between `slideUp()` and `slideDown()`.\r\n    ```javascript\r\n    $('#element').slideToggle();\r\n    ```\r\n\r\n##### Example:\r\n```html\r\n<button id=\"slideBtn\">Slide Up/Down</button>\r\n<div id=\"slideBox\" style=\"width:100px; height:100px; background-color:yellow;\"></div>\r\n\r\n<script>\r\n    $('#slideBtn').click(function() {\r\n        $('#slideBox').slideToggle();\r\n    });\r\n</script>\r\n```\r\nClicking the button will slide the yellow box up and down.\r\n\r\n#### Custom Animations\r\n\r\njQuery allows you to define your own animations using the **animate()** method. You can control properties such as height, width, opacity, and many more, giving you full control over the animation process.\r\n\r\n- **animate()**: Animates custom CSS properties.\r\n    ```javascript\r\n    $('#element').animate({\r\n        width: '300px',\r\n        opacity: 0.5\r\n    }, 1000); // Animates in 1 second\r\n    ```\r\n\r\n##### Example:\r\n```html\r\n<button id=\"animateBtn\">Animate</button>\r\n<div id=\"animateBox\" style=\"width:100px; height:100px; background-color:purple;\"></div>\r\n\r\n<script>\r\n    $('#animateBtn').click(function() {\r\n        $('#animateBox').animate({\r\n            width: '300px',\r\n            height: '300px',\r\n            opacity: 0.5\r\n        }, 1000); // Animates in 1 second\r\n    });\r\n</script>\r\n```\r\nWhen the button is clicked, the purple box will smoothly expand in size and reduce its opacity.\r\n\r\n---\r\n\r\n### Mini Project: **Collapsible FAQ Section**\r\n\r\n**Goal**: Create a FAQ section where clicking on questions reveals or hides the answers using jQuery slide and fade effects.\r\n\r\n#### HTML Structure for FAQ Section:\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Collapsible FAQ Section</title>\r\n    <style>\r\n        .faq-section {\r\n            width: 400px;\r\n            margin: 20px auto;\r\n        }\r\n        .faq-question {\r\n            cursor: pointer;\r\n            padding: 10px;\r\n            background-color: #f7f7f7;\r\n            margin-bottom: 5px;\r\n            border: 1px solid #ccc;\r\n        }\r\n        .faq-answer {\r\n            display: none;\r\n            padding: 10px;\r\n            background-color: #f0f0f0;\r\n            border: 1px solid #ddd;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"faq-section\">\r\n        <div class=\"faq-item\">\r\n            <div class=\"faq-question\">What is jQuery?</div>\r\n            <div class=\"faq-answer\">jQuery is a lightweight JavaScript library that simplifies HTML DOM manipulation, event handling, and animations.</div>\r\n        </div>\r\n        <div class=\"faq-item\">\r\n            <div class=\"faq-question\">How does jQuery simplify JavaScript?</div>\r\n            <div class=\"faq-answer\">jQuery provides a simple API that works across browsers and makes it easy to write powerful JavaScript with less code.</div>\r\n        </div>\r\n        <div class=\"faq-item\">\r\n            <div class=\"faq-question\">What is a jQuery plugin?</div>\r\n            <div class=\"faq-answer\">A jQuery plugin is a method that extends jQuery's functionality, allowing you to reuse code across projects.</div>\r\n        </div>\r\n    </div>\r\n\r\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n    <script>\r\n        $(document).ready(function() {\r\n            $('.faq-question').click(function() {\r\n                // Toggle the corresponding answer using slide and fade effects\r\n                $(this).next('.faq-answer').slideToggle(300).fadeToggle(300);\r\n            });\r\n        });\r\n    </script>\r\n</body>\r\n</html>\r\n```\r\n\r\n#### Explanation:\r\n- **HTML Structure**: Each FAQ item consists of a question and an answer. The questions are clickable, and the answers are hidden by default.\r\n- **jQuery Effects**: When a question is clicked, the corresponding answer is toggled using a combination of `slideToggle()` and `fadeToggle()`. This creates a smooth, combined sliding and fading effect.\r\n- **.faq-item**: Each question-answer pair is wrapped in a `.faq-item` div for better structure and styling.\r\n- **Events**: The `.faq-question` has a `click` event attached to it. When a question is clicked, the `.faq-answer` associated with it is shown or hidden.\r\n\r\nThis collapsible FAQ section provides a clean and user-friendly way to present frequently asked questions, allowing users to reveal answers with a smooth animation.",
      "uploaded_by": 2,
      "created_at": "2024-09-17T17:52:32.988Z",
      "auto_slug": "jquery-effects",
      "topics": [264]
    }
  },
  {
    "model": "main.note",
    "pk": 9,
    "fields": {
      "title": "jQuery DOM Manipulation",
      "content": "### 5. **jQuery DOM Manipulation**\r\n\r\nDOM (Document Object Model) manipulation is one of jQuery's most powerful features, allowing you to dynamically update the structure, content, and styling of web pages. With jQuery, you can effortlessly interact with and modify the HTML content and elements of your page in real time.\r\n\r\n#### Text and HTML Manipulation\r\n\r\n- **text()**: Used to get or set the text content of an element. When called without arguments, it retrieves the text content of the selected element. When provided with an argument, it sets the text of the element.\r\n    ```javascript\r\n    // Get text\r\n    var content = $('#element').text();\r\n    \r\n    // Set text\r\n    $('#element').text('This is new text content');\r\n    ```\r\n\r\n##### Example:\r\n```html\r\n<div id=\"message\">Hello, World!</div>\r\n<button id=\"changeTextBtn\">Change Text</button>\r\n\r\n<script>\r\n    $('#changeTextBtn').click(function() {\r\n        $('#message').text('Text has been changed!');\r\n    });\r\n</script>\r\n```\r\nIn this example, when the button is clicked, the text inside the `#message` div is changed using `text()`.\r\n\r\n- **html()**: Similar to `text()`, but it can get or set the **HTML** content of an element. It interprets the string as HTML, meaning you can add HTML tags inside the content.\r\n    ```javascript\r\n    // Get HTML content\r\n    var htmlContent = $('#element').html();\r\n    \r\n    // Set HTML content\r\n    $('#element').html('<strong>Bold text</strong>');\r\n    ```\r\n\r\n##### Example:\r\n```html\r\n<div id=\"content\">This is <em>italic</em> text.</div>\r\n<button id=\"changeHtmlBtn\">Change HTML</button>\r\n\r\n<script>\r\n    $('#changeHtmlBtn').click(function() {\r\n        $('#content').html('<strong>This is bold text now!</strong>');\r\n    });\r\n</script>\r\n```\r\nHere, the HTML content is updated to include a `<strong>` tag when the button is clicked.\r\n\r\n#### Append, Prepend, and Remove Elements\r\n\r\n- **append()**: Inserts content to the end of the selected elements.\r\n    ```javascript\r\n    $('#list').append('<li>New Item</li>');\r\n    ```\r\n\r\n- **prepend()**: Inserts content at the beginning of the selected elements.\r\n    ```javascript\r\n    $('#list').prepend('<li>First Item</li>');\r\n    ```\r\n\r\n##### Example:\r\n```html\r\n<ul id=\"list\">\r\n    <li>Item 1</li>\r\n    <li>Item 2</li>\r\n</ul>\r\n<button id=\"addItemBtn\">Add Item</button>\r\n\r\n<script>\r\n    $('#addItemBtn').click(function() {\r\n        $('#list').append('<li>New Item</li>');\r\n    });\r\n</script>\r\n```\r\nIn this case, every time the button is clicked, a new item is appended to the end of the list.\r\n\r\n- **remove()**: Removes the selected element(s) from the DOM.\r\n    ```javascript\r\n    $('#element').remove();\r\n    ```\r\n\r\n##### Example:\r\n```html\r\n<ul id=\"list\">\r\n    <li>Item 1 <button class=\"removeItem\">Remove</button></li>\r\n    <li>Item 2 <button class=\"removeItem\">Remove</button></li>\r\n</ul>\r\n\r\n<script>\r\n    $('.removeItem').click(function() {\r\n        $(this).parent().remove();\r\n    });\r\n</script>\r\n```\r\nIn this example, clicking the \"Remove\" button will remove the corresponding list item from the DOM.\r\n\r\n#### Class and Attribute Manipulation\r\n\r\n- **addClass()**: Adds one or more classes to the selected elements.\r\n    ```javascript\r\n    $('#element').addClass('highlight');\r\n    ```\r\n\r\n- **removeClass()**: Removes one or more classes from the selected elements.\r\n    ```javascript\r\n    $('#element').removeClass('highlight');\r\n    ```\r\n\r\n- **toggleClass()**: Toggles between adding and removing a class from the selected elements.\r\n    ```javascript\r\n    $('#element').toggleClass('highlight');\r\n    ```\r\n\r\n##### Example:\r\n```html\r\n<div id=\"box\" class=\"square\"></div>\r\n<button id=\"toggleClassBtn\">Toggle Highlight</button>\r\n\r\n<script>\r\n    $('#toggleClassBtn').click(function() {\r\n        $('#box').toggleClass('highlight');\r\n    });\r\n</script>\r\n```\r\nIn this example, clicking the button will toggle the class `highlight` on the `#box` element, dynamically changing its styling.\r\n\r\n- **attr()**: Gets or sets the attribute value of an element.\r\n    ```javascript\r\n    // Get attribute\r\n    var value = $('#element').attr('id');\r\n    \r\n    // Set attribute\r\n    $('#element').attr('title', 'This is a title');\r\n    ```\r\n\r\n##### Example:\r\n```html\r\n<img id=\"myImage\" src=\"image1.jpg\" alt=\"First Image\">\r\n<button id=\"changeImageBtn\">Change Image</button>\r\n\r\n<script>\r\n    $('#changeImageBtn').click(function() {\r\n        $('#myImage').attr('src', 'image2.jpg');\r\n    });\r\n</script>\r\n```\r\nHere, when the button is clicked, the `src` attribute of the image is changed, replacing it with a different image.\r\n\r\n---\r\n\r\n### Mini Project: **To-Do List Application**\r\n\r\n**Goal**: Build a simple to-do list application where users can add, edit, and remove tasks using jQuery DOM manipulation methods.\r\n\r\n#### HTML Structure:\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>To-Do List App</title>\r\n    <style>\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n        }\r\n        #todo-list {\r\n            list-style: none;\r\n            padding: 0;\r\n        }\r\n        #todo-list li {\r\n            padding: 10px;\r\n            background-color: #f7f7f7;\r\n            margin-bottom: 5px;\r\n            display: flex;\r\n            justify-content: space-between;\r\n        }\r\n        .edit-task, .delete-task {\r\n            margin-left: 10px;\r\n            cursor: pointer;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <h1>To-Do List</h1>\r\n    <input type=\"text\" id=\"taskInput\" placeholder=\"Enter a new task\">\r\n    <button id=\"addTaskBtn\">Add Task</button>\r\n    <ul id=\"todo-list\"></ul>\r\n\r\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n    <script>\r\n        $(document).ready(function() {\r\n            // Add Task\r\n            $('#addTaskBtn').click(function() {\r\n                var taskText = $('#taskInput').val();\r\n                if (taskText !== '') {\r\n                    var taskItem = '<li>' + taskText + \r\n                                   '<span class=\"edit-task\">[Edit]</span>' +\r\n                                   '<span class=\"delete-task\">[Delete]</span></li>';\r\n                    $('#todo-list').append(taskItem);\r\n                    $('#taskInput').val(''); // Clear input field\r\n                }\r\n            });\r\n\r\n            // Delete Task\r\n            $('#todo-list').on('click', '.delete-task', function() {\r\n                $(this).parent().remove();\r\n            });\r\n\r\n            // Edit Task\r\n            $('#todo-list').on('click', '.edit-task', function() {\r\n                var currentTask = $(this).parent().text().replace('[Edit][Delete]', '').trim();\r\n                var newTask = prompt('Edit Task:', currentTask);\r\n                if (newTask) {\r\n                    $(this).parent().html(newTask + \r\n                                          '<span class=\"edit-task\">[Edit]</span>' +\r\n                                          '<span class=\"delete-task\">[Delete]</span>');\r\n                }\r\n            });\r\n        });\r\n    </script>\r\n</body>\r\n</html>\r\n```\r\n\r\n#### Explanation:\r\n- **Add Task**: When the \"Add Task\" button is clicked, the task input value is retrieved and appended to the `#todo-list` as a new list item. Each task includes \"Edit\" and \"Delete\" options.\r\n- **Delete Task**: Clicking the \"Delete\" button next to a task removes it from the list using the `remove()` method.\r\n- **Edit Task**: Clicking the \"Edit\" button opens a prompt allowing the user to modify the task's content. Once edited, the new value replaces the old one, and the \"Edit\" and \"Delete\" buttons are restored.\r\n\r\n**Key jQuery Features Used**:\r\n- **text()**: Used to retrieve the text of a task for editing.\r\n- **append()**: Adds new tasks to the to-do list.\r\n- **remove()**: Deletes tasks from the list.\r\n- **on()**: Delegates click events for dynamically added elements like the Edit and Delete buttons.\r\n\r\nThis simple To-Do List app demonstrates how jQuery's DOM manipulation methods make it easy to add, modify, and delete elements dynamically in response to user actions.",
      "uploaded_by": 2,
      "created_at": "2024-09-17T17:53:25.056Z",
      "auto_slug": "jquery-dom-manipulation",
      "topics": [264]
    }
  },
  {
    "model": "main.note",
    "pk": 10,
    "fields": {
      "title": "jQuery Traversing",
      "content": "### 6. **jQuery Traversing**\r\n\r\njQuery provides several methods for traversing the DOM, which allow you to find and interact with elements relative to other elements. Traversing is especially useful when you need to access elements based on their relationship with other elements (e.g., parents, children, siblings). Understanding these traversal methods is key for building dynamic and interactive interfaces.\r\n\r\n#### Finding Elements\r\n\r\n- **parent()**: Selects the immediate parent of the selected element.\r\n    ```javascript\r\n    $('#child-element').parent();\r\n    ```\r\n\r\n##### Example:\r\n```html\r\n<div id=\"parent\">\r\n    <div id=\"child\">This is the child</div>\r\n</div>\r\n<button id=\"findParent\">Find Parent</button>\r\n\r\n<script>\r\n    $('#findParent').click(function() {\r\n        $('#child').parent().css('border', '2px solid red');\r\n    });\r\n</script>\r\n```\r\nHere, clicking the \"Find Parent\" button highlights the parent of the `#child` element by adding a red border to it.\r\n\r\n- **children()**: Selects all the direct child elements of the selected element.\r\n    ```javascript\r\n    $('#parent-element').children();\r\n    ```\r\n\r\n##### Example:\r\n```html\r\n<div id=\"parent\">\r\n    <div class=\"child\">Child 1</div>\r\n    <div class=\"child\">Child 2</div>\r\n</div>\r\n<button id=\"findChildren\">Find Children</button>\r\n\r\n<script>\r\n    $('#findChildren').click(function() {\r\n        $('#parent').children('.child').css('background-color', 'yellow');\r\n    });\r\n</script>\r\n```\r\nClicking the \"Find Children\" button will highlight all direct child elements of the `#parent` div by changing their background color to yellow.\r\n\r\n- **siblings()**: Selects all sibling elements (elements sharing the same parent) of the selected element.\r\n    ```javascript\r\n    $('#element').siblings();\r\n    ```\r\n\r\n##### Example:\r\n```html\r\n<div>\r\n    <p class=\"item\">Item 1</p>\r\n    <p class=\"item\">Item 2</p>\r\n    <p id=\"selectedItem\" class=\"item\">Selected Item</p>\r\n    <p class=\"item\">Item 3</p>\r\n</div>\r\n<button id=\"highlightSiblings\">Highlight Siblings</button>\r\n\r\n<script>\r\n    $('#highlightSiblings').click(function() {\r\n        $('#selectedItem').siblings().css('background-color', 'lightgreen');\r\n    });\r\n</script>\r\n```\r\nIn this example, when the button is clicked, all the siblings of the `#selectedItem` will be highlighted with a light green background.\r\n\r\n#### Filtering\r\n\r\n- **filter()**: Filters elements based on a specified condition, returning only the elements that match.\r\n    ```javascript\r\n    $('li').filter('.active');\r\n    ```\r\n\r\n##### Example:\r\n```html\r\n<ul>\r\n    <li>Item 1</li>\r\n    <li class=\"active\">Item 2 (Active)</li>\r\n    <li>Item 3</li>\r\n    <li class=\"active\">Item 4 (Active)</li>\r\n</ul>\r\n<button id=\"filterActive\">Filter Active Items</button>\r\n\r\n<script>\r\n    $('#filterActive').click(function() {\r\n        $('li').filter('.active').css('font-weight', 'bold');\r\n    });\r\n</script>\r\n```\r\nWhen the button is clicked, only the items with the class `active` will be bolded.\r\n\r\n- **not()**: Excludes elements that match a specified condition from the selection.\r\n    ```javascript\r\n    $('li').not('.disabled');\r\n    ```\r\n\r\n##### Example:\r\n```html\r\n<ul>\r\n    <li>Item 1</li>\r\n    <li class=\"disabled\">Item 2 (Disabled)</li>\r\n    <li>Item 3</li>\r\n    <li class=\"disabled\">Item 4 (Disabled)</li>\r\n</ul>\r\n<button id=\"highlightNotDisabled\">Highlight Non-Disabled</button>\r\n\r\n<script>\r\n    $('#highlightNotDisabled').click(function() {\r\n        $('li').not('.disabled').css('background-color', 'lightblue');\r\n    });\r\n</script>\r\n```\r\nIn this case, clicking the button will highlight all list items that do not have the `disabled` class.\r\n\r\n- **eq()**: Selects the element at the specified index in a set of matched elements.\r\n    ```javascript\r\n    $('li').eq(2);\r\n    ```\r\n\r\n##### Example:\r\n```html\r\n<ul>\r\n    <li>Item 1</li>\r\n    <li>Item 2</li>\r\n    <li>Item 3</li>\r\n    <li>Item 4</li>\r\n</ul>\r\n<button id=\"selectThird\">Select Third Item</button>\r\n\r\n<script>\r\n    $('#selectThird').click(function() {\r\n        $('li').eq(2).css('color', 'red');\r\n    });\r\n</script>\r\n```\r\nWhen you click the button, only the third item in the list will turn red, as `eq(2)` targets the element at index 2 (0-based index).\r\n\r\n---\r\n\r\n### Mini Project: **Interactive Table**\r\n\r\n**Goal**: Build an interactive table where users can highlight specific rows or cells based on their input using jQuery traversal methods.\r\n\r\n#### HTML Structure:\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Interactive Table</title>\r\n    <style>\r\n        table {\r\n            width: 100%;\r\n            border-collapse: collapse;\r\n        }\r\n        th, td {\r\n            padding: 10px;\r\n            border: 1px solid #ccc;\r\n        }\r\n        .highlight {\r\n            background-color: yellow;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n\r\n    <h1>Interactive Table</h1>\r\n    <table id=\"data-table\">\r\n        <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Age</th>\r\n                <th>City</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td>John</td>\r\n                <td>25</td>\r\n                <td>New York</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Jane</td>\r\n                <td>30</td>\r\n                <td>Los Angeles</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Bob</td>\r\n                <td>35</td>\r\n                <td>Chicago</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n\r\n    <label for=\"rowNumber\">Enter Row Number to Highlight:</label>\r\n    <input type=\"number\" id=\"rowNumber\" min=\"1\" max=\"3\">\r\n    <button id=\"highlightRow\">Highlight Row</button>\r\n\r\n    <br><br>\r\n\r\n    <label for=\"columnNumber\">Enter Column Number to Highlight:</label>\r\n    <input type=\"number\" id=\"columnNumber\" min=\"1\" max=\"3\">\r\n    <button id=\"highlightColumn\">Highlight Column</button>\r\n\r\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n    <script>\r\n        $(document).ready(function() {\r\n            // Highlight Row\r\n            $('#highlightRow').click(function() {\r\n                var rowNum = $('#rowNumber').val() - 1; // Convert to 0-based index\r\n                $('#data-table tbody tr').removeClass('highlight'); // Remove previous highlights\r\n                $('#data-table tbody tr').eq(rowNum).addClass('highlight');\r\n            });\r\n\r\n            // Highlight Column\r\n            $('#highlightColumn').click(function() {\r\n                var colNum = $('#columnNumber').val() - 1; // Convert to 0-based index\r\n                $('#data-table td').removeClass('highlight'); // Remove previous highlights\r\n                $('#data-table tbody tr').each(function() {\r\n                    $(this).find('td').eq(colNum).addClass('highlight');\r\n                });\r\n            });\r\n        });\r\n    </script>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\n#### Explanation:\r\n- **Highlight Row**: \r\n  - The user inputs a row number in the text field.\r\n  - The `eq()` method is used to select the row at the entered index (adjusted to 0-based index). The row is then highlighted by adding the `highlight` class, which changes the background color to yellow.\r\n  - `removeClass('highlight')` is used to remove previous highlights before applying a new one.\r\n\r\n- **Highlight Column**:\r\n  - The user inputs a column number in the text field.\r\n  - The `eq()` method is used inside a loop (`each()`) to highlight the specific column across all rows.\r\n  - As with rows, previous highlights are removed before the new highlight is applied.\r\n\r\n**Key jQuery Features Used**:\r\n- **eq()**: To select specific rows or columns based on user input.\r\n- **each()**: To iterate over each row of the table when highlighting a column.\r\n- **removeClass() / addClass()**: To dynamically manage the highlighting by adding/removing the `highlight` class.\r\n\r\nThis interactive table project showcases how jQuery traversal methods can be used to dynamically select and modify specific parts of the DOM based on user input, making the interface more interactive and user-friendly.",
      "uploaded_by": 2,
      "created_at": "2024-09-17T17:54:20.120Z",
      "auto_slug": "jquery-traversing",
      "topics": [264]
    }
  },
  {
    "model": "main.note",
    "pk": 11,
    "fields": {
      "title": "jQuery AJAX",
      "content": "### 7. **jQuery AJAX**\r\n\r\nAJAX (Asynchronous JavaScript and XML) allows you to asynchronously load and send data to/from a server without having to reload the page. jQuery simplifies the use of AJAX by providing easy-to-use methods to interact with servers and external APIs. ItÔÇÖs especially useful for creating dynamic web applications that need to communicate with a server behind the scenes.\r\n\r\n#### AJAX Introduction and Benefits\r\n\r\nAJAX allows web pages to be updated asynchronously by exchanging small amounts of data with the server. This means that parts of a web page can be updated without requiring a full page reload.\r\n\r\n**Benefits of AJAX**:\r\n- **Asynchronous Communication**: Page elements can be updated in the background without blocking other interactions.\r\n- **Faster and More Responsive UIs**: By only loading necessary data, you reduce the need for complete page refreshes.\r\n- **Improved User Experience**: AJAX enables features like instant form validation, infinite scrolling, and live data updates.\r\n\r\n#### Loading External Data\r\n\r\njQuery provides several methods to load data from a server or an API:\r\n- **load()**: Loads data from the server and places it into a specific element.\r\n- **get()**: Sends an HTTP GET request to retrieve data from a server.\r\n- **post()**: Sends an HTTP POST request to send data to a server.\r\n\r\n##### Example: Using `load()`\r\n```html\r\n<div id=\"content\"></div>\r\n<button id=\"loadData\">Load Data</button>\r\n\r\n<script>\r\n    $('#loadData').click(function() {\r\n        $('#content').load('data.html');\r\n    });\r\n</script>\r\n```\r\nIn this example, clicking the \"Load Data\" button loads the content of `data.html` into the `#content` div using the `load()` method.\r\n\r\n#### Handling JSON with jQuery\r\n\r\nJSON (JavaScript Object Notation) is a lightweight format used for data exchange. jQuery can easily fetch and process JSON data from a server using AJAX methods like `get()` and `post()`.\r\n\r\n##### Example: Using `get()`\r\n```javascript\r\n$.get('https://api.example.com/data', function(response) {\r\n    console.log(response);\r\n});\r\n```\r\nThis sends a GET request to the server, and the response (in JSON format) is logged to the console.\r\n\r\n##### Example: Using `post()`\r\n```javascript\r\n$.post('https://api.example.com/data', { key: 'value' }, function(response) {\r\n    console.log(response);\r\n});\r\n```\r\nHere, a POST request is sent to the server with data `{ key: 'value' }`, and the response is logged to the console.\r\n\r\n### Mini Project: **Weather App**\r\n\r\n**Goal**: Build a small weather app that fetches weather data from a weather API using jQuery AJAX methods.\r\n\r\n#### Steps:\r\n1. **API Integration**: Use a weather API (e.g., OpenWeatherMap) to fetch the current weather based on the user's input (city name).\r\n2. **AJAX Request**: Use jQuery's AJAX methods to send a request to the API and handle the response.\r\n3. **Display Weather**: Show the fetched weather data (temperature, weather condition) on the web page.\r\n\r\n#### Example Code:\r\n\r\n##### HTML Structure:\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Weather App</title>\r\n    <style>\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            text-align: center;\r\n            margin-top: 50px;\r\n        }\r\n        #weatherData {\r\n            margin-top: 20px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <h1>Weather App</h1>\r\n    <input type=\"text\" id=\"city\" placeholder=\"Enter City Name\">\r\n    <button id=\"getWeather\">Get Weather</button>\r\n\r\n    <div id=\"weatherData\"></div>\r\n\r\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n    <script>\r\n        $(document).ready(function() {\r\n            $('#getWeather').click(function() {\r\n                var city = $('#city').val();\r\n                if (city !== '') {\r\n                    $.ajax({\r\n                        url: 'https://api.openweathermap.org/data/2.5/weather',\r\n                        type: 'GET',\r\n                        dataType: 'json',\r\n                        data: {\r\n                            q: city,\r\n                            appid: 'YOUR_API_KEY',  // Replace with your OpenWeather API key\r\n                            units: 'metric'\r\n                        },\r\n                        success: function(response) {\r\n                            var weatherInfo = `\r\n                                <h3>Weather in ${response.name}</h3>\r\n                                <p>Temperature: ${response.main.temp} ┬░C</p>\r\n                                <p>Condition: ${response.weather[0].description}</p>\r\n                            `;\r\n                            $('#weatherData').html(weatherInfo);\r\n                        },\r\n                        error: function() {\r\n                            $('#weatherData').html('<p>City not found. Please try again.</p>');\r\n                        }\r\n                    });\r\n                } else {\r\n                    $('#weatherData').html('<p>Please enter a city name.</p>');\r\n                }\r\n            });\r\n        });\r\n    </script>\r\n</body>\r\n</html>\r\n```\r\n\r\n#### Explanation:\r\n\r\n1. **HTML Input and Button**: \r\n   - The user enters a city name in the text input field.\r\n   - Clicking the \"Get Weather\" button triggers the AJAX request to fetch weather data for the entered city.\r\n\r\n2. **jQuery AJAX Request**:\r\n   - When the button is clicked, an AJAX GET request is made to the OpenWeatherMap API with the city name and an API key.\r\n   - `url`: The endpoint for the weather API.\r\n   - `dataType`: Set to 'json' to indicate that we expect a JSON response.\r\n   - `data`: Contains the query parameters like the city name, API key, and units of measurement (Celsius in this case).\r\n   - **Success**: If the request is successful, the response (weather data) is displayed in the `#weatherData` div.\r\n   - **Error Handling**: If the city is not found or the request fails, an error message is displayed.\r\n\r\n3. **API Key**: You will need to replace `YOUR_API_KEY` with your actual OpenWeather API key, which you can get by signing up on [OpenWeatherMap](https://openweathermap.org/).\r\n\r\n4. **Weather Data Display**:\r\n   - The app displays the city name, temperature (in Celsius), and weather condition (e.g., cloudy, sunny) on the page.\r\n\r\n#### Summary:\r\n\r\n- **AJAX Methods Used**:\r\n  - **`$.ajax()`**: A flexible AJAX method used for making requests.\r\n  - **Success and Error Callbacks**: To handle the API response or any potential errors.\r\n  \r\nThis small weather app demonstrates the power of jQuery AJAX methods for creating dynamic, API-driven applications. By fetching live data from an external server and displaying it on the web page, you can enhance the user experience and build more interactive web applications.",
      "uploaded_by": 2,
      "created_at": "2024-09-17T17:54:55.198Z",
      "auto_slug": "jquery-ajax",
      "topics": [265]
    }
  },
  {
    "model": "main.note",
    "pk": 12,
    "fields": {
      "title": "jQuery Plugins",
      "content": "### 8. **jQuery Plugins**\r\n\r\njQuery plugins are reusable pieces of code that extend jQueryÔÇÖs functionality by offering specific, pre-built features or components that you can easily integrate into your projects. Plugins make it easy to add advanced interactions or functionality to your site without needing to build everything from scratch.\r\n\r\n#### What are Plugins?\r\n\r\nA **jQuery plugin** is simply a reusable library built on top of jQuery, which can be included in any project to perform tasks like form validation, image sliders, animations, etc. Instead of writing all the functionality yourself, you include the plugin and use its predefined methods or functions.\r\n\r\n**Benefits of using jQuery plugins**:\r\n- **Save Time and Effort**: Plugins provide pre-built solutions for common tasks.\r\n- **Customization**: Many plugins offer options for customization, so you can modify them to suit your projectÔÇÖs needs.\r\n- **Community Support**: Popular plugins are usually well-documented and supported by a large community of developers.\r\n  \r\n**Example**: Let's say you want to implement an image carousel. Instead of writing your own slider functionality, you can use an existing plugin like Slick or Owl Carousel to handle it with minimal effort.\r\n\r\n#### Popular jQuery Plugins\r\n\r\nHere are some of the most commonly used jQuery plugins:\r\n\r\n1. **Slick Carousel**: A widely used plugin for creating responsive, touch-friendly sliders.\r\n2. **Owl Carousel**: Another responsive and touch-friendly carousel/slider plugin.\r\n3. **jQuery UI**: A collection of GUI widgets, including sliders, date pickers, and more.\r\n4. **Lightbox**: A popular plugin for displaying images or galleries in a modal window.\r\n5. **DataTables**: A plugin that enhances HTML tables with features like sorting, pagination, and filtering.\r\n\r\n#### How to Include and Use Plugins\r\n\r\nUsing a jQuery plugin usually involves the following steps:\r\n\r\n1. **Download or Link to the Plugin**: You can either download the plugin files or link to them via a CDN (Content Delivery Network).\r\n2. **Include the PluginÔÇÖs CSS and JS Files**: Include the necessary CSS and JavaScript files in your HTML.\r\n3. **Initialize the Plugin**: Write a simple jQuery code snippet to initialize and configure the plugin according to your needs.\r\n\r\n##### Example: Using the Slick Carousel Plugin\r\n\r\n1. **Include the necessary files**:\r\n   ```html\r\n   <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.css\"/>\r\n   <script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n   <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.js\"></script>\r\n   ```\r\n\r\n2. **HTML Structure**:\r\n   ```html\r\n   <div class=\"carousel\">\r\n       <div><img src=\"image1.jpg\" alt=\"Image 1\"></div>\r\n       <div><img src=\"image2.jpg\" alt=\"Image 2\"></div>\r\n       <div><img src=\"image3.jpg\" alt=\"Image 3\"></div>\r\n   </div>\r\n   ```\r\n\r\n3. **Initialize the Slick plugin**:\r\n   ```javascript\r\n   $(document).ready(function(){\r\n       $('.carousel').slick({\r\n           autoplay: true,\r\n           autoplaySpeed: 2000,\r\n           dots: true,\r\n           arrows: true\r\n       });\r\n   });\r\n   ```\r\n\r\nIn this example:\r\n- **autoplay**: Automatically transitions between images every 2 seconds.\r\n- **dots**: Enables the navigation dots below the carousel.\r\n- **arrows**: Enables the navigation arrows to manually switch between images.\r\n\r\n#### Mini Project: **Image Carousel**\r\n\r\n**Goal**: Implement a dynamic image carousel using a jQuery plugin like Slick or Owl Carousel.\r\n\r\n---\r\n\r\n#### Steps:\r\n\r\n1. **Select a Plugin**: For this project, we will use the **Slick Carousel** plugin to implement an image carousel.\r\n2. **Setup Your HTML Structure**: Create a div to hold the images.\r\n3. **Include Plugin Files**: Add the necessary CSS and JS files for the plugin.\r\n4. **Initialize the Plugin**: Write a jQuery function to initialize the plugin and customize its options.\r\n\r\n---\r\n\r\n### Example Code: Image Carousel with Slick\r\n\r\n##### HTML Structure:\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Image Carousel</title>\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.css\"/>\r\n    <style>\r\n        .carousel img {\r\n            width: 100%;\r\n            height: auto;\r\n        }\r\n        .carousel {\r\n            width: 80%;\r\n            margin: 0 auto;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n\r\n    <h1>Dynamic Image Carousel</h1>\r\n    <div class=\"carousel\">\r\n        <div><img src=\"https://via.placeholder.com/800x400?text=Image+1\" alt=\"Image 1\"></div>\r\n        <div><img src=\"https://via.placeholder.com/800x400?text=Image+2\" alt=\"Image 2\"></div>\r\n        <div><img src=\"https://via.placeholder.com/800x400?text=Image+3\" alt=\"Image 3\"></div>\r\n    </div>\r\n\r\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n    <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.js\"></script>\r\n    <script>\r\n        $(document).ready(function(){\r\n            $('.carousel').slick({\r\n                autoplay: true,\r\n                autoplaySpeed: 3000,\r\n                dots: true,\r\n                arrows: true,\r\n                infinite: true,\r\n                speed: 500,\r\n                fade: true,\r\n                cssEase: 'linear'\r\n            });\r\n        });\r\n    </script>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\n#### Explanation:\r\n\r\n1. **HTML Structure**: \r\n   - The images are placed inside divs, and all the divs are wrapped inside the main `carousel` div.\r\n   - You can replace the placeholder images with your actual images by changing the `src` attribute.\r\n\r\n2. **Including the Plugin**:\r\n   - The Slick carousel's CSS and JS files are included using a CDN.\r\n\r\n3. **Initialization**:\r\n   - The `.slick()` function initializes the carousel and sets its options:\r\n     - **autoplay**: The carousel slides automatically.\r\n     - **autoplaySpeed**: The time between slides (in milliseconds).\r\n     - **dots**: Displays navigation dots at the bottom of the carousel.\r\n     - **arrows**: Shows left and right arrows for manual navigation.\r\n     - **infinite**: The carousel loops back to the first slide when it reaches the last.\r\n     - **fade**: The images fade in and out instead of sliding horizontally.\r\n\r\n---\r\n\r\n### Summary:\r\n\r\n- **What are Plugins?**: jQuery plugins are reusable, pre-built solutions that can be easily integrated into your web projects to add functionality like sliders, forms, animations, etc.\r\n  \r\n- **Popular jQuery Plugins**: Plugins like Slick Carousel, Owl Carousel, jQuery UI, and DataTables make it easy to implement advanced features without writing extensive code.\r\n\r\n- **How to Use Plugins**: Plugins are included by linking to their CSS and JavaScript files, and then initialized using a jQuery function.\r\n\r\n**Mini Project: Image Carousel** demonstrates how to use the Slick plugin to create a dynamic, responsive image slider on your website.",
      "uploaded_by": 2,
      "created_at": "2024-09-17T17:55:24.022Z",
      "auto_slug": "jquery-plugins",
      "topics": [265]
    }
  },
  {
    "model": "main.note",
    "pk": 13,
    "fields": {
      "title": "jQuery Plugins",
      "content": "### 8. **jQuery Plugins**\r\n\r\njQuery plugins are reusable pieces of code that extend jQueryÔÇÖs functionality by offering specific, pre-built features or components that you can easily integrate into your projects. Plugins make it easy to add advanced interactions or functionality to your site without needing to build everything from scratch.\r\n\r\n#### What are Plugins?\r\n\r\nA **jQuery plugin** is simply a reusable library built on top of jQuery, which can be included in any project to perform tasks like form validation, image sliders, animations, etc. Instead of writing all the functionality yourself, you include the plugin and use its predefined methods or functions.\r\n\r\n**Benefits of using jQuery plugins**:\r\n- **Save Time and Effort**: Plugins provide pre-built solutions for common tasks.\r\n- **Customization**: Many plugins offer options for customization, so you can modify them to suit your projectÔÇÖs needs.\r\n- **Community Support**: Popular plugins are usually well-documented and supported by a large community of developers.\r\n  \r\n**Example**: Let's say you want to implement an image carousel. Instead of writing your own slider functionality, you can use an existing plugin like Slick or Owl Carousel to handle it with minimal effort.\r\n\r\n#### Popular jQuery Plugins\r\n\r\nHere are some of the most commonly used jQuery plugins:\r\n\r\n1. **Slick Carousel**: A widely used plugin for creating responsive, touch-friendly sliders.\r\n2. **Owl Carousel**: Another responsive and touch-friendly carousel/slider plugin.\r\n3. **jQuery UI**: A collection of GUI widgets, including sliders, date pickers, and more.\r\n4. **Lightbox**: A popular plugin for displaying images or galleries in a modal window.\r\n5. **DataTables**: A plugin that enhances HTML tables with features like sorting, pagination, and filtering.\r\n\r\n#### How to Include and Use Plugins\r\n\r\nUsing a jQuery plugin usually involves the following steps:\r\n\r\n1. **Download or Link to the Plugin**: You can either download the plugin files or link to them via a CDN (Content Delivery Network).\r\n2. **Include the PluginÔÇÖs CSS and JS Files**: Include the necessary CSS and JavaScript files in your HTML.\r\n3. **Initialize the Plugin**: Write a simple jQuery code snippet to initialize and configure the plugin according to your needs.\r\n\r\n##### Example: Using the Slick Carousel Plugin\r\n\r\n1. **Include the necessary files**:\r\n   ```html\r\n   <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.css\"/>\r\n   <script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n   <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.js\"></script>\r\n   ```\r\n\r\n2. **HTML Structure**:\r\n   ```html\r\n   <div class=\"carousel\">\r\n       <div><img src=\"image1.jpg\" alt=\"Image 1\"></div>\r\n       <div><img src=\"image2.jpg\" alt=\"Image 2\"></div>\r\n       <div><img src=\"image3.jpg\" alt=\"Image 3\"></div>\r\n   </div>\r\n   ```\r\n\r\n3. **Initialize the Slick plugin**:\r\n   ```javascript\r\n   $(document).ready(function(){\r\n       $('.carousel').slick({\r\n           autoplay: true,\r\n           autoplaySpeed: 2000,\r\n           dots: true,\r\n           arrows: true\r\n       });\r\n   });\r\n   ```\r\n\r\nIn this example:\r\n- **autoplay**: Automatically transitions between images every 2 seconds.\r\n- **dots**: Enables the navigation dots below the carousel.\r\n- **arrows**: Enables the navigation arrows to manually switch between images.\r\n\r\n#### Mini Project: **Image Carousel**\r\n\r\n**Goal**: Implement a dynamic image carousel using a jQuery plugin like Slick or Owl Carousel.\r\n\r\n---\r\n\r\n#### Steps:\r\n\r\n1. **Select a Plugin**: For this project, we will use the **Slick Carousel** plugin to implement an image carousel.\r\n2. **Setup Your HTML Structure**: Create a div to hold the images.\r\n3. **Include Plugin Files**: Add the necessary CSS and JS files for the plugin.\r\n4. **Initialize the Plugin**: Write a jQuery function to initialize the plugin and customize its options.\r\n\r\n---\r\n\r\n### Example Code: Image Carousel with Slick\r\n\r\n##### HTML Structure:\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Image Carousel</title>\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.css\"/>\r\n    <style>\r\n        .carousel img {\r\n            width: 100%;\r\n            height: auto;\r\n        }\r\n        .carousel {\r\n            width: 80%;\r\n            margin: 0 auto;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n\r\n    <h1>Dynamic Image Carousel</h1>\r\n    <div class=\"carousel\">\r\n        <div><img src=\"https://via.placeholder.com/800x400?text=Image+1\" alt=\"Image 1\"></div>\r\n        <div><img src=\"https://via.placeholder.com/800x400?text=Image+2\" alt=\"Image 2\"></div>\r\n        <div><img src=\"https://via.placeholder.com/800x400?text=Image+3\" alt=\"Image 3\"></div>\r\n    </div>\r\n\r\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n    <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.js\"></script>\r\n    <script>\r\n        $(document).ready(function(){\r\n            $('.carousel').slick({\r\n                autoplay: true,\r\n                autoplaySpeed: 3000,\r\n                dots: true,\r\n                arrows: true,\r\n                infinite: true,\r\n                speed: 500,\r\n                fade: true,\r\n                cssEase: 'linear'\r\n            });\r\n        });\r\n    </script>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\n#### Explanation:\r\n\r\n1. **HTML Structure**: \r\n   - The images are placed inside divs, and all the divs are wrapped inside the main `carousel` div.\r\n   - You can replace the placeholder images with your actual images by changing the `src` attribute.\r\n\r\n2. **Including the Plugin**:\r\n   - The Slick carousel's CSS and JS files are included using a CDN.\r\n\r\n3. **Initialization**:\r\n   - The `.slick()` function initializes the carousel and sets its options:\r\n     - **autoplay**: The carousel slides automatically.\r\n     - **autoplaySpeed**: The time between slides (in milliseconds).\r\n     - **dots**: Displays navigation dots at the bottom of the carousel.\r\n     - **arrows**: Shows left and right arrows for manual navigation.\r\n     - **infinite**: The carousel loops back to the first slide when it reaches the last.\r\n     - **fade**: The images fade in and out instead of sliding horizontally.\r\n\r\n---\r\n\r\n### Summary:\r\n\r\n- **What are Plugins?**: jQuery plugins are reusable, pre-built solutions that can be easily integrated into your web projects to add functionality like sliders, forms, animations, etc.\r\n  \r\n- **Popular jQuery Plugins**: Plugins like Slick Carousel, Owl Carousel, jQuery UI, and DataTables make it easy to implement advanced features without writing extensive code.\r\n\r\n- **How to Use Plugins**: Plugins are included by linking to their CSS and JavaScript files, and then initialized using a jQuery function.\r\n\r\n**Mini Project: Image Carousel** demonstrates how to use the Slick plugin to create a dynamic, responsive image slider on your website.",
      "uploaded_by": 2,
      "created_at": "2024-09-17T17:55:26.082Z",
      "auto_slug": "jquery-plugins-2",
      "topics": [265]
    }
  },
  {
    "model": "main.note",
    "pk": 14,
    "fields": {
      "title": "jQuery UI",
      "content": "### 9. **jQuery UI**\r\n\r\n**jQuery UI** is a curated set of user interface interactions, effects, widgets, and themes built on top of the jQuery JavaScript Library. It provides a lot of pre-made components that are easy to integrate into web applications, helping developers quickly add sophisticated UI elements to their projects without writing complex code.\r\n\r\n#### Introduction to jQuery UI\r\n\r\n**jQuery UI** adds interactivity to your website with a wide range of features:\r\n- **Interactions**: Add drag-and-drop, sorting, and resizing capabilities to elements.\r\n- **Widgets**: Ready-to-use UI components like accordions, date pickers, sliders, and tabs.\r\n- **Effects**: Animated effects like showing/hiding, bouncing, and sliding.\r\n\r\nTo start using jQuery UI, you can include it in your project by linking to the jQuery UI CDN:\r\n\r\n```html\r\n<link rel=\"stylesheet\" href=\"https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css\">\r\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n<script src=\"https://code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\r\n```\r\n\r\n#### Draggable and Droppable\r\n\r\n**Draggable**: The draggable interaction makes an element movable by clicking and dragging it around.\r\n\r\n##### Example: Making an Element Draggable\r\n```html\r\n<div id=\"draggable\" style=\"width: 100px; height: 100px; background-color: blue;\">Drag me</div>\r\n\r\n<script>\r\n  $(function() {\r\n    $(\"#draggable\").draggable();\r\n  });\r\n</script>\r\n```\r\n\r\nIn this example, the element with the id `draggable` becomes movable within the browser window using the `draggable()` method.\r\n\r\n**Droppable**: You can combine draggable elements with droppable areas, which respond when a draggable element is dropped onto them.\r\n\r\n##### Example: Making an Element Droppable\r\n```html\r\n<div id=\"draggable\" style=\"width: 100px; height: 100px; background-color: blue;\">Drag me</div>\r\n<div id=\"droppable\" style=\"width: 200px; height: 200px; background-color: lightgrey; margin-top: 20px;\">Drop here</div>\r\n\r\n<script>\r\n  $(function() {\r\n    $(\"#draggable\").draggable();\r\n    $(\"#droppable\").droppable({\r\n      drop: function(event, ui) {\r\n        $(this).css(\"background-color\", \"green\").html(\"Dropped!\");\r\n      }\r\n    });\r\n  });\r\n</script>\r\n```\r\n\r\nHere, when the blue `#draggable` element is dropped onto the `#droppable` area, the background color of `#droppable` changes to green, and the text inside it updates to say \"Dropped!\".\r\n\r\n#### Accordion and Tabs\r\n\r\n**Accordion**: The accordion widget allows you to create collapsible sections, useful for FAQs or content that you want to reveal in pieces.\r\n\r\n##### Example: Accordion\r\n```html\r\n<div id=\"accordion\">\r\n  <h3>Section 1</h3>\r\n  <div>\r\n    <p>Content for section 1.</p>\r\n  </div>\r\n  <h3>Section 2</h3>\r\n  <div>\r\n    <p>Content for section 2.</p>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n  $(function() {\r\n    $(\"#accordion\").accordion();\r\n  });\r\n</script>\r\n```\r\n\r\nIn this example, `#accordion` is turned into a collapsible, multi-section interface where only one section is open at a time.\r\n\r\n**Tabs**: Tabs organize content into sections, allowing users to navigate between different parts of the content without reloading the page.\r\n\r\n##### Example: Tabs\r\n```html\r\n<div id=\"tabs\">\r\n  <ul>\r\n    <li><a href=\"#tab-1\">Tab 1</a></li>\r\n    <li><a href=\"#tab-2\">Tab 2</a></li>\r\n  </ul>\r\n  <div id=\"tab-1\">\r\n    <p>Content for Tab 1</p>\r\n  </div>\r\n  <div id=\"tab-2\">\r\n    <p>Content for Tab 2</p>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n  $(function() {\r\n    $(\"#tabs\").tabs();\r\n  });\r\n</script>\r\n```\r\n\r\nIn this example, you create a simple tabbed interface, where clicking the tab headers will reveal the content in the associated section.\r\n\r\n#### Datepicker\r\n\r\n**Datepicker**: The datepicker widget adds a calendar popup to input fields, allowing users to pick a date. ItÔÇÖs commonly used in forms for selecting dates in a user-friendly way.\r\n\r\n##### Example: Datepicker\r\n```html\r\n<label for=\"date\">Select a date:</label>\r\n<input type=\"text\" id=\"date\">\r\n\r\n<script>\r\n  $(function() {\r\n    $(\"#date\").datepicker();\r\n  });\r\n</script>\r\n```\r\n\r\nHere, the `#date` input field is converted into a date picker. When clicked, a calendar pops up, allowing the user to select a date.\r\n\r\n---\r\n\r\n### Mini Project: **Event Scheduler**\r\n\r\n**Goal**: Build a simple event scheduling app that allows users to pick dates using the jQuery UI Datepicker and drag-and-drop events to time slots using the Draggable and Droppable features.\r\n\r\n#### Steps:\r\n1. **Set Up Datepicker for Date Selection**: Allow users to select dates for scheduling events.\r\n2. **Use Draggable for Events**: Make event cards draggable, so users can drag them onto the schedule.\r\n3. **Use Droppable for Time Slots**: Create droppable time slots where users can place their events.\r\n\r\n---\r\n\r\n### Example Code: Event Scheduler\r\n\r\n##### HTML Structure:\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Event Scheduler</title>\r\n    <link rel=\"stylesheet\" href=\"https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css\">\r\n    <style>\r\n        .event {\r\n            width: 150px;\r\n            padding: 10px;\r\n            margin-bottom: 10px;\r\n            background-color: #3498db;\r\n            color: white;\r\n            cursor: move;\r\n        }\r\n        .time-slot {\r\n            width: 200px;\r\n            height: 50px;\r\n            margin-bottom: 20px;\r\n            background-color: #ecf0f1;\r\n            border: 2px dashed #bdc3c7;\r\n        }\r\n        .schedule {\r\n            margin-top: 20px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n\r\n    <h1>Event Scheduler</h1>\r\n\r\n    <!-- Datepicker for selecting date -->\r\n    <label for=\"event-date\">Select Event Date:</label>\r\n    <input type=\"text\" id=\"event-date\">\r\n\r\n    <h2>Events</h2>\r\n    <!-- Draggable event cards -->\r\n    <div class=\"event\" id=\"event1\">Meeting with John</div>\r\n    <div class=\"event\" id=\"event2\">Project Deadline</div>\r\n\r\n    <h2>Schedule</h2>\r\n    <!-- Droppable time slots -->\r\n    <div class=\"schedule\">\r\n        <div class=\"time-slot\" id=\"slot1\">9:00 AM - 10:00 AM</div>\r\n        <div class=\"time-slot\" id=\"slot2\">10:00 AM - 11:00 AM</div>\r\n    </div>\r\n\r\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n    <script src=\"https://code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\r\n    <script>\r\n        $(function() {\r\n            // Datepicker initialization\r\n            $(\"#event-date\").datepicker();\r\n\r\n            // Make events draggable\r\n            $(\".event\").draggable({\r\n                revert: \"invalid\", // Revert if not dropped on valid target\r\n                helper: \"clone\"\r\n            });\r\n\r\n            // Make time slots droppable\r\n            $(\".time-slot\").droppable({\r\n                accept: \".event\",\r\n                drop: function(event, ui) {\r\n                    $(this).html(\"Scheduled: \" + ui.draggable.text())\r\n                           .css(\"background-color\", \"#2ecc71\");\r\n                }\r\n            });\r\n        });\r\n    </script>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\n#### Explanation:\r\n\r\n1. **Datepicker**:\r\n   - The user can select the event date using the `#event-date` input field, which is linked to the jQuery UI Datepicker.\r\n   \r\n2. **Draggable Events**:\r\n   - The two event cards (Meeting with John and Project Deadline) are draggable. The `revert: \"invalid\"` option ensures that the events return to their original position if theyÔÇÖre not dropped on a valid time slot.\r\n   - The `helper: \"clone\"` option creates a visual clone when dragging.\r\n\r\n3. **Droppable Time Slots**:\r\n   - The time slots are droppable areas where users can drop events.\r\n   - When an event is dropped into a time slot, the text inside the time slot updates to show the event name, and the background color changes to green to indicate the event is scheduled.\r\n\r\n---\r\n\r\n### Summary:\r\n\r\n- **jQuery UI** provides a wide range of widgets and interactions that enhance user interfaces without writing complex code from scratch.\r\n- **Draggable and Droppable**: Add drag-and-drop capabilities to elements, allowing users to move items around the page or into specific drop zones.\r\n- **Accordion and Tabs**: Organize content into collapsible or tabbed sections for better usability.\r\n- **Datepicker**: Allow users to easily select dates in a user-friendly way with a calendar popup.\r\n\r\n**Mini Project: Event Scheduler** demonstrates how you can combine multiple jQuery UI featuresÔÇösuch as the Datepicker, Draggable",
      "uploaded_by": 1,
      "created_at": "2024-09-17T18:00:41.372Z",
      "auto_slug": "jquery-ui",
      "topics": [265]
    }
  },
  {
    "model": "main.note",
    "pk": 15,
    "fields": {
      "title": "jQuery Performance Optimization",
      "content": "### 10. **jQuery Performance Optimization**\r\n\r\nPerformance optimization is crucial in web development to ensure that applications run smoothly and efficiently, even when dealing with large amounts of data or complex user interactions. jQuery, while powerful and easy to use, can sometimes lead to performance issues if not used wisely. HereÔÇÖs how to optimize jQuery operations to improve your webpageÔÇÖs performance.\r\n\r\n#### Minimizing jQuery Operations\r\n\r\nEvery jQuery operation (like querying the DOM, adding or removing elements) can be resource-intensive, especially if repeated frequently. Reducing the number of operations can significantly improve performance.\r\n\r\n**Best Practices:**\r\n- **Batch Operations**: Instead of performing multiple jQuery operations one after another, batch them together when possible.\r\n- **Avoid Redundant Selections**: If you need to access the same element multiple times, cache the jQuery object rather than querying the DOM repeatedly.\r\n\r\n##### Example: Minimizing jQuery Operations\r\n```javascript\r\n// Inefficient\r\n$('#element1').css('color', 'red');\r\n$('#element1').css('background-color', 'blue');\r\n\r\n// Efficient\r\nvar $element = $('#element1');\r\n$element.css({\r\n  'color': 'red',\r\n  'background-color': 'blue'\r\n});\r\n```\r\n\r\nIn this example, we cache the jQuery object in a variable `$element` and apply multiple CSS changes in a single call, reducing the number of jQuery operations.\r\n\r\n#### Caching Selectors\r\n\r\nEvery time you use a jQuery selector (e.g., `$('#myDiv')`), jQuery traverses the DOM to find the matching elements. If you use the same selector multiple times, cache it in a variable to avoid redundant DOM queries.\r\n\r\n##### Example: Caching Selectors\r\n```javascript\r\n// Inefficient\r\n$('#myDiv').hide();\r\n$('#myDiv').css('color', 'red');\r\n$('#myDiv').text('Hello');\r\n\r\n// Efficient\r\nvar $myDiv = $('#myDiv');\r\n$myDiv.hide();\r\n$myDiv.css('color', 'red');\r\n$myDiv.text('Hello');\r\n```\r\n\r\nHere, we cache the result of `$('#myDiv')` in the `$myDiv` variable and use it for all subsequent operations, which is more efficient.\r\n\r\n#### Using Document Fragment\r\n\r\nWhen you need to add or remove a large number of elements, itÔÇÖs more efficient to use a **document fragment**. A document fragment is a lightweight container that is not part of the DOM. You can append elements to the fragment, and then append the fragment to the DOM in a single operation.\r\n\r\n##### Example: Using Document Fragment\r\n```javascript\r\nvar $fragment = $(document.createDocumentFragment());\r\n\r\n// Append multiple elements to the fragment\r\nfor (var i = 0; i < 100; i++) {\r\n  $('<div>').text('Item ' + i).appendTo($fragment);\r\n}\r\n\r\n// Append the fragment to the DOM in one go\r\n$('#container').append($fragment);\r\n```\r\n\r\nIn this example, we create a document fragment and append 100 `<div>` elements to it. Only after all elements are added do we append the fragment to the DOM, which is more efficient than appending each element individually.\r\n\r\n#### Debouncing and Throttling Events\r\n\r\nWhen dealing with events that fire frequently, such as `scroll`, `resize`, or `input`, itÔÇÖs important to control the rate at which event handlers execute to avoid performance issues.\r\n\r\n**Debouncing**: Ensures that a function is executed only after a certain amount of time has passed since the last time the function was invoked. Useful for events that fire rapidly, like `input` changes.\r\n\r\n**Throttling**: Limits the execution of a function to a maximum number of times per interval. Useful for events that fire continuously, like `scroll`.\r\n\r\n##### Example: Debouncing\r\n```javascript\r\nfunction debounce(func, wait) {\r\n  var timeout;\r\n  return function() {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(func, wait);\r\n  };\r\n}\r\n\r\n// Usage\r\n$(window).on('resize', debounce(function() {\r\n  console.log('Window resized');\r\n}, 250));\r\n```\r\n\r\nIn this example, the `debounce` function ensures that the resize event handler executes only once every 250 milliseconds, regardless of how often the resize event fires.\r\n\r\n##### Example: Throttling\r\n```javascript\r\nfunction throttle(func, limit) {\r\n  var lastFunc;\r\n  var lastRan;\r\n  return function() {\r\n    var context = this;\r\n    var args = arguments;\r\n    if (!lastRan) {\r\n      func.apply(context, args);\r\n      lastRan = Date.now();\r\n    } else {\r\n      clearTimeout(lastFunc);\r\n      lastFunc = setTimeout(function() {\r\n        if ((Date.now() - lastRan) >= limit) {\r\n          func.apply(context, args);\r\n          lastRan = Date.now();\r\n        }\r\n      }, limit - (Date.now() - lastRan));\r\n    }\r\n  };\r\n}\r\n\r\n// Usage\r\n$(window).on('scroll', throttle(function() {\r\n  console.log('Scrolled');\r\n}, 1000));\r\n```\r\n\r\nIn this example, the `throttle` function limits the scroll event handler to execute once every second, reducing the number of times the function is called.\r\n\r\n---\r\n\r\n### Mini Project: **Optimized Scrolling Webpage**\r\n\r\n**Goal**: Implement a webpage with infinite scrolling, ensuring that heavy DOM updates are optimized for performance.\r\n\r\n#### Steps:\r\n1. **Setup Infinite Scrolling**: Load more content as the user scrolls down the page.\r\n2. **Optimize DOM Updates**: Use techniques like batching DOM updates and document fragments to handle large amounts of data efficiently.\r\n3. **Implement Debouncing/Throttling**: Ensure that the scroll event handler does not execute excessively, which can lead to performance issues.\r\n\r\n##### Example Code: Optimized Scrolling Webpage\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Infinite Scrolling</title>\r\n    <style>\r\n        #content {\r\n            width: 80%;\r\n            margin: 0 auto;\r\n        }\r\n        .item {\r\n            padding: 20px;\r\n            border-bottom: 1px solid #ddd;\r\n        }\r\n        #loading {\r\n            text-align: center;\r\n            padding: 20px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n\r\n    <div id=\"content\">\r\n        <!-- Content will be dynamically loaded here -->\r\n    </div>\r\n    <div id=\"loading\">Loading...</div>\r\n\r\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n    <script>\r\n        var page = 1;\r\n        var loading = false;\r\n\r\n        function loadMoreContent() {\r\n            if (loading) return;\r\n            loading = true;\r\n\r\n            $.ajax({\r\n                url: 'https://example.com/api/items?page=' + page,\r\n                method: 'GET',\r\n                success: function(data) {\r\n                    var $fragment = $(document.createDocumentFragment());\r\n\r\n                    data.items.forEach(function(item) {\r\n                        $('<div class=\"item\">').text(item.content).appendTo($fragment);\r\n                    });\r\n\r\n                    $('#content').append($fragment);\r\n                    page++;\r\n                    loading = false;\r\n                }\r\n            });\r\n        }\r\n\r\n        function onScroll() {\r\n            if ($(window).scrollTop() + $(window).height() > $(document).height() - 100) {\r\n                loadMoreContent();\r\n            }\r\n        }\r\n\r\n        $(window).on('scroll', _.throttle(onScroll, 200)); // Using lodash's throttle for demonstration\r\n\r\n        // Initial load\r\n        loadMoreContent();\r\n    </script>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\n#### Explanation:\r\n\r\n1. **Setup Infinite Scrolling**:\r\n   - The `loadMoreContent` function fetches data from a server and appends it to the `#content` div.\r\n   - The `page` variable tracks the current page of data being fetched.\r\n\r\n2. **Optimize DOM Updates**:\r\n   - Data is first added to a document fragment and then appended to the DOM in a single operation to improve performance.\r\n\r\n3. **Debouncing/Throttling**:\r\n   - The `onScroll` function is called only when the user scrolls close to the bottom of the page, and itÔÇÖs throttled to ensure it doesnÔÇÖt execute too frequently.\r\n\r\n---\r\n\r\n### Summary:\r\n\r\n- **Minimizing jQuery Operations**: Reduce the number of jQuery operations by batching them and caching selectors to improve performance.\r\n- **Using Document Fragment**: Batch large DOM updates using document fragments to reduce the number of reflows and repaints.\r\n- **Debouncing and Throttling Events**: Control the frequency of event handler execution to avoid performance bottlenecks.\r\n\r\n**Mini Project: Optimized Scrolling Webpage** demonstrates how to implement infinite scrolling with optimized performance, ensuring smooth user experiences even with large datasets.",
      "uploaded_by": 1,
      "created_at": "2024-09-17T18:01:16.433Z",
      "auto_slug": "jquery-performance-optimization",
      "topics": [265]
    }
  },
  {
    "model": "main.note",
    "pk": 16,
    "fields": {
      "title": "Final Mini Project: Dynamic Portfolio Website",
      "content": "### Final Mini Project: **Dynamic Portfolio Website**\r\n\r\n**Objective**: Build a comprehensive portfolio website that showcases your work and skills, integrating a variety of jQuery functionalities to enhance interactivity and performance. The site will feature an image gallery, interactive forms, an FAQ section, and AJAX-based content loading. This project will demonstrate the application of various jQuery concepts and techniques learned throughout the course.\r\n\r\n#### Overview\r\n\r\n1. **Introduction and Setup**\r\n   - **Project Goals**: To create a dynamic and interactive portfolio website using jQuery.\r\n   - **Project Structure**: Organize the project into different sections for easy management.\r\n   - **Tools and Libraries**: Use jQuery, jQuery UI, and relevant jQuery plugins.\r\n\r\n2. **Features to Implement**\r\n   - Image Gallery with lightbox effect.\r\n   - Interactive forms for contact and feedback.\r\n   - Collapsible FAQ section.\r\n   - Infinite scrolling for a blog or projects section.\r\n   - AJAX-based content loading for seamless updates.\r\n\r\n#### 1. **Project Setup**\r\n\r\n**1.1. Project Directory Structure**\r\n```plaintext\r\nportfolio-website/\r\nÔöé\r\nÔö£ÔöÇÔöÇ index.html\r\nÔö£ÔöÇÔöÇ css/\r\nÔöé   Ôö£ÔöÇÔöÇ styles.css\r\nÔöé   ÔööÔöÇÔöÇ jquery-ui.css\r\nÔö£ÔöÇÔöÇ js/\r\nÔöé   Ôö£ÔöÇÔöÇ main.js\r\nÔöé   ÔööÔöÇÔöÇ jquery.min.js\r\nÔöé   ÔööÔöÇÔöÇ jquery-ui.min.js\r\nÔöé   ÔööÔöÇÔöÇ plugin.js (e.g., for image carousel)\r\nÔö£ÔöÇÔöÇ images/\r\nÔöé   Ôö£ÔöÇÔöÇ gallery1.jpg\r\nÔöé   Ôö£ÔöÇÔöÇ gallery2.jpg\r\nÔöé   ÔööÔöÇÔöÇ ...\r\nÔööÔöÇÔöÇ ajax/\r\n    ÔööÔöÇÔöÇ projects.json\r\n```\r\n\r\n**1.2. Basic HTML Structure**\r\n\r\nCreate a basic HTML template with links to jQuery libraries and your custom scripts and styles.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Dynamic Portfolio</title>\r\n    <link rel=\"stylesheet\" href=\"css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"css/jquery-ui.css\">\r\n</head>\r\n<body>\r\n    <!-- Navigation -->\r\n    <nav>\r\n        <ul>\r\n            <li><a href=\"#gallery\">Gallery</a></li>\r\n            <li><a href=\"#contact\">Contact</a></li>\r\n            <li><a href=\"#faq\">FAQ</a></li>\r\n            <li><a href=\"#projects\">Projects</a></li>\r\n        </ul>\r\n    </nav>\r\n\r\n    <!-- Gallery Section -->\r\n    <section id=\"gallery\">\r\n        <h2>Gallery</h2>\r\n        <div class=\"gallery-container\">\r\n            <!-- Gallery Images -->\r\n        </div>\r\n    </section>\r\n\r\n    <!-- Contact Form Section -->\r\n    <section id=\"contact\">\r\n        <h2>Contact</h2>\r\n        <form id=\"contact-form\">\r\n            <label for=\"name\">Name:</label>\r\n            <input type=\"text\" id=\"name\" name=\"name\" required>\r\n            <label for=\"email\">Email:</label>\r\n            <input type=\"email\" id=\"email\" name=\"email\" required>\r\n            <label for=\"message\">Message:</label>\r\n            <textarea id=\"message\" name=\"message\" required></textarea>\r\n            <button type=\"submit\">Send</button>\r\n        </form>\r\n    </section>\r\n\r\n    <!-- FAQ Section -->\r\n    <section id=\"faq\">\r\n        <h2>FAQ</h2>\r\n        <div id=\"accordion\">\r\n            <!-- FAQ Items -->\r\n        </div>\r\n    </section>\r\n\r\n    <!-- Projects Section with Infinite Scrolling -->\r\n    <section id=\"projects\">\r\n        <h2>Projects</h2>\r\n        <div id=\"projects-container\">\r\n            <!-- Projects will be loaded here -->\r\n        </div>\r\n        <div id=\"loading\">Loading...</div>\r\n    </section>\r\n\r\n    <script src=\"js/jquery.min.js\"></script>\r\n    <script src=\"js/jquery-ui.min.js\"></script>\r\n    <script src=\"js/main.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n#### 2. **Image Gallery with Lightbox Effect**\r\n\r\n**2.1. Image Gallery Setup**\r\n\r\nUse jQuery to create an image gallery where clicking on a thumbnail opens a lightbox.\r\n\r\n**HTML:**\r\n```html\r\n<div class=\"gallery-container\">\r\n    <a href=\"images/gallery1.jpg\" class=\"gallery-item\" data-lightbox=\"gallery\">\r\n        <img src=\"images/gallery1.jpg\" alt=\"Gallery Image 1\">\r\n    </a>\r\n    <a href=\"images/gallery2.jpg\" class=\"gallery-item\" data-lightbox=\"gallery\">\r\n        <img src=\"images/gallery2.jpg\" alt=\"Gallery Image 2\">\r\n    </a>\r\n    <!-- Add more images -->\r\n</div>\r\n```\r\n\r\n**CSS:**\r\n```css\r\n.gallery-container {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n}\r\n.gallery-item {\r\n    margin: 5px;\r\n}\r\n.gallery-item img {\r\n    width: 100px;\r\n    height: auto;\r\n    border: 2px solid #ddd;\r\n}\r\n```\r\n\r\n**JavaScript:**\r\nIntegrate a lightbox plugin (e.g., Lightbox2).\r\n\r\n```html\r\n<!-- Include Lightbox CSS and JS in HTML head -->\r\n<link href=\"path/to/lightbox.css\" rel=\"stylesheet\">\r\n<script src=\"path/to/lightbox-plus-jquery.js\"></script>\r\n\r\n<script>\r\n  $(document).ready(function() {\r\n    lightbox.option({\r\n      'resizeDuration': 200,\r\n      'wrapAround': true\r\n    });\r\n  });\r\n</script>\r\n```\r\n\r\n#### 3. **Interactive Forms**\r\n\r\n**3.1. Contact Form Setup**\r\n\r\nAdd jQuery validation and handling to the contact form.\r\n\r\n**JavaScript:**\r\n```javascript\r\n$(document).ready(function() {\r\n  $(\"#contact-form\").submit(function(event) {\r\n    event.preventDefault();\r\n    \r\n    // Form Validation\r\n    var isValid = true;\r\n    $(\"#contact-form input, #contact-form textarea\").each(function() {\r\n      if ($(this).val() === '') {\r\n        isValid = false;\r\n        $(this).addClass('error');\r\n      } else {\r\n        $(this).removeClass('error');\r\n      }\r\n    });\r\n\r\n    if (isValid) {\r\n      // Form Submission (AJAX or other)\r\n      $.ajax({\r\n        url: 'send-mail.php',\r\n        type: 'POST',\r\n        data: $(this).serialize(),\r\n        success: function(response) {\r\n          alert('Message sent successfully!');\r\n          $(\"#contact-form\")[0].reset();\r\n        },\r\n        error: function() {\r\n          alert('Failed to send message.');\r\n        }\r\n      });\r\n    } else {\r\n      alert('Please fill in all required fields.');\r\n    }\r\n  });\r\n});\r\n```\r\n\r\n**CSS for Validation:**\r\n```css\r\ninput.error, textarea.error {\r\n  border: 1px solid red;\r\n}\r\n```\r\n\r\n#### 4. **Collapsible FAQ Section**\r\n\r\n**4.1. FAQ Section Setup**\r\n\r\nCreate a collapsible FAQ section using jQuery UI Accordion.\r\n\r\n**HTML:**\r\n```html\r\n<div id=\"accordion\">\r\n    <h3>What is your experience?</h3>\r\n    <div>\r\n        <p>Details about your experience...</p>\r\n    </div>\r\n    <h3>What technologies do you use?</h3>\r\n    <div>\r\n        <p>Details about the technologies you use...</p>\r\n    </div>\r\n    <!-- Add more FAQ items -->\r\n</div>\r\n```\r\n\r\n**JavaScript:**\r\n```javascript\r\n$(document).ready(function() {\r\n  $(\"#accordion\").accordion({\r\n    heightStyle: \"content\"\r\n  });\r\n});\r\n```\r\n\r\n**CSS:**\r\n```css\r\n#accordion {\r\n    width: 80%;\r\n    margin: 0 auto;\r\n}\r\n```\r\n\r\n#### 5. **Infinite Scrolling for Projects Section**\r\n\r\n**5.1. Projects Section Setup**\r\n\r\nImplement infinite scrolling to load more projects as the user scrolls down.\r\n\r\n**JavaScript:**\r\n```javascript\r\n$(document).ready(function() {\r\n  var page = 1;\r\n  var loading = false;\r\n\r\n  function loadMoreProjects() {\r\n    if (loading) return;\r\n    loading = true;\r\n\r\n    $.ajax({\r\n      url: 'ajax/projects.json?page=' + page,\r\n      method: 'GET',\r\n      success: function(data) {\r\n        var $fragment = $(document.createDocumentFragment());\r\n\r\n        data.projects.forEach(function(project) {\r\n          var projectItem = $('<div class=\"project\">')\r\n            .append('<h3>' + project.title + '</h3>')\r\n            .append('<p>' + project.description + '</p>');\r\n          $fragment.append(projectItem);\r\n        });\r\n\r\n        $('#projects-container').append($fragment);\r\n        page++;\r\n        loading = false;\r\n        if (data.projects.length === 0) {\r\n          $('#loading').hide(); // Hide loading message if no more projects\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  $(window).on('scroll', _.throttle(function() {\r\n    if ($(window).scrollTop() + $(window).height() > $(document).height() - 100) {\r\n      loadMoreProjects();\r\n    }\r\n  }, 200));\r\n\r\n  // Initial load\r\n  loadMoreProjects();\r\n});\r\n```\r\n\r\n**CSS:**\r\n```css\r\n.project {\r\n    padding: 20px;\r\n    border-bottom: 1px solid #ddd;\r\n}\r\n#loading {\r\n    text-align: center;\r\n    padding: 20px;\r\n}\r\n```\r\n\r\n**Note**: Use lodash or another library for throttling in the example above.\r\n\r\n#### 6. **Testing and Final Touches**\r\n\r\n**6.1. Cross-Browser Testing**\r\n\r\nEnsure that the website works across different browsers and devices. Test the functionality of the image gallery, forms, FAQ section, and infinite scrolling.\r\n\r\n**6.2. Performance Optimization**\r\n\r\n- Minify CSS and JavaScript files.\r\n- Optimize images for faster loading.\r\n- Use caching and content delivery networks (CDNs\r\n\r\n) where applicable.\r\n\r\n**6.3. Accessibility and SEO**\r\n\r\n- Add appropriate `alt` text for images.\r\n- Ensure that forms and interactive elements are accessible.\r\n- Use semantic HTML and meta tags for better SEO.\r\n\r\n---\r\n\r\n### Summary\r\n\r\nThis final mini project involves creating a fully functional portfolio website that integrates various jQuery concepts. By implementing an image gallery, interactive forms, a collapsible FAQ section, and infinite scrolling, you will apply your knowledge of jQuery to build a dynamic and engaging website.\r\n\r\n- **Image Gallery**: Utilize jQuery and lightbox plugins to create an interactive gallery.\r\n- **Interactive Forms**: Add real-time validation and AJAX submission for user interaction.\r\n- **FAQ Section**: Use jQuery UI to build a collapsible FAQ section.\r\n- **Infinite Scrolling**: Implement efficient content loading using AJAX and jQuery.\r\n\r\nThis project will not only demonstrate your ability to use jQuery effectively but also showcase your skills in creating a cohesive and user-friendly web experience.",
      "uploaded_by": 1,
      "created_at": "2024-09-17T18:01:50.419Z",
      "auto_slug": "final-mini-project-dynamic-portfolio-website",
      "topics": [265]
    }
  },
  {
    "model": "main.note",
    "pk": 17,
    "fields": {
      "title": "Introduction to JavaScript",
      "content": "JavaScript (JS) is a high-level, interpreted programming language that is widely used to create dynamic web content. It's one of the core technologies of the web, alongside HTML and CSS. Initially, it was designed for client-side operations, but with the introduction of frameworks like Node.js, it can also be used for server-side programming.\r\n\r\n## JavaScript Basics\r\n\r\n### 1. JavaScript Syntax\r\n\r\nJavaScript syntax refers to the set of rules that define a correctly structured JavaScript program. It includes keywords, operators, and punctuation that determine the logical flow of the code.\r\n\r\n#### Statements\r\nIn JavaScript, code is written as **statements**. A statement can perform an action or express logic. Typically, statements end with a **semicolon** (`;`), although semicolons are optional in many cases due to automatic semicolon insertion.\r\n\r\n```js\r\nlet x = 5;\r\nconsole.log(x); // Outputs: 5\r\n```\r\n\r\n#### Comments\r\nJavaScript allows you to add comments to improve the readability of your code.\r\n\r\n- **Single-line comments**: Begin with `//`\r\n  \r\n  ```js\r\n  // This is a single-line comment\r\n  ```\r\n\r\n- **Multi-line comments**: Enclosed within `/* */`\r\n  \r\n  ```js\r\n  /* This is a\r\n     multi-line comment */\r\n  ```\r\n\r\n#### Case Sensitivity\r\nJavaScript is **case-sensitive**. This means `myVariable` and `MyVariable` are treated as different variables.\r\n\r\n---\r\n\r\n### 2. Variables\r\n\r\nVariables store data values that can be used and manipulated throughout the program. In JavaScript, variables are declared using the keywords `var`, `let`, or `const`.\r\n\r\n#### Variable Declarations\r\n\r\n- **var**: The original way to declare variables. `var` has function-level scope, which can lead to unexpected behavior in certain cases.\r\n\r\n  ```js\r\n  var name = \"John\";\r\n  console.log(name); // Outputs: John\r\n  ```\r\n\r\n- **let**: Introduced in ES6 (ES2015), `let` provides block-level scope and is generally preferred over `var`.\r\n\r\n  ```js\r\n  let age = 25;\r\n  age = 26; // Can be reassigned\r\n  console.log(age); // Outputs: 26\r\n  ```\r\n\r\n- **const**: Also introduced in ES6, `const` creates variables that cannot be reassigned. It's used for values that should remain constant.\r\n\r\n  ```js\r\n  const pi = 3.14;\r\n  // pi = 3.14159; // This will throw an error\r\n  ```\r\n\r\n#### Variable Naming Rules\r\n- Must start with a letter, underscore (`_`), or dollar sign (`$`).\r\n- Cannot start with a number.\r\n- Names are case-sensitive (`myVar` is different from `myvar`).\r\n- Reserved keywords (like `class`, `return`, etc.) cannot be used as variable names.\r\n\r\n#### Data Types\r\n\r\nJavaScript is a **dynamically typed language**, meaning you don't have to specify the data type of a variable explicitly. Some of the basic data types include:\r\n\r\n- **Number**: Represents both integer and floating-point numbers.\r\n  ```js\r\n  let x = 5;\r\n  let y = 3.14;\r\n  ```\r\n\r\n- **String**: A sequence of characters enclosed in single or double quotes.\r\n  ```js\r\n  let greeting = \"Hello, World!\";\r\n  ```\r\n\r\n- **Boolean**: Represents logical values: `true` or `false`.\r\n  ```js\r\n  let isJavaScriptFun = true;\r\n  ```\r\n\r\n- **Null**: Represents an intentionally empty value.\r\n  ```js\r\n  let emptyValue = null;\r\n  ```\r\n\r\n- **Undefined**: A variable that has been declared but not assigned a value.\r\n  ```js\r\n  let notAssigned;\r\n  ```\r\n\r\n- **Object**: A collection of properties and values.\r\n  ```js\r\n  let person = {\r\n    firstName: \"John\",\r\n    lastName: \"Doe\"\r\n  };\r\n  ```\r\n\r\n- **Array**: A list of values.\r\n  ```js\r\n  let numbers = [1, 2, 3, 4, 5];\r\n  ```\r\n\r\n#### Type Conversion\r\nJavaScript automatically converts types when necessary (implicit type conversion), but you can also manually convert types (explicit type conversion).\r\n\r\n```js\r\nlet strNum = \"10\";\r\nlet num = Number(strNum); // Converts the string to a number\r\n```\r\n\r\n---\r\n\r\n### 3. Control Structures\r\n\r\nControl structures in JavaScript dictate the flow of execution based on certain conditions or loops.\r\n\r\n#### 3.1 Conditional Statements\r\n\r\nConditional statements control the execution of code blocks based on conditions.\r\n\r\n##### if Statement\r\nExecutes a block of code if the specified condition is `true`.\r\n\r\n```js\r\nif (condition) {\r\n  // Code to be executed if the condition is true\r\n}\r\n```\r\n\r\nExample:\r\n\r\n```js\r\nlet age = 18;\r\n\r\nif (age >= 18) {\r\n  console.log(\"You are an adult.\");\r\n}\r\n```\r\n\r\n##### if...else Statement\r\nProvides an alternative block of code to execute when the condition is `false`.\r\n\r\n```js\r\nif (condition) {\r\n  // Code to be executed if the condition is true\r\n} else {\r\n  // Code to be executed if the condition is false\r\n}\r\n```\r\n\r\nExample:\r\n\r\n```js\r\nlet age = 16;\r\n\r\nif (age >= 18) {\r\n  console.log(\"You are an adult.\");\r\n} else {\r\n  console.log(\"You are a minor.\");\r\n}\r\n```\r\n\r\n##### if...else if...else Statement\r\nAllows for multiple conditions to be tested in sequence.\r\n\r\n```js\r\nif (condition1) {\r\n  // Code to be executed if condition1 is true\r\n} else if (condition2) {\r\n  // Code to be executed if condition1 is false and condition2 is true\r\n} else {\r\n  // Code to be executed if all conditions are false\r\n}\r\n```\r\n\r\nExample:\r\n\r\n```js\r\nlet score = 85;\r\n\r\nif (score >= 90) {\r\n  console.log(\"A grade\");\r\n} else if (score >= 80) {\r\n  console.log(\"B grade\");\r\n} else {\r\n  console.log(\"C grade\");\r\n}\r\n```\r\n\r\n##### Switch Statement\r\nUsed to perform different actions based on different conditions.\r\n\r\n```js\r\nswitch (expression) {\r\n  case value1:\r\n    // Code to execute if expression matches value1\r\n    break;\r\n  case value2:\r\n    // Code to execute if expression matches value2\r\n    break;\r\n  default:\r\n    // Code to execute if no case matches\r\n}\r\n```\r\n\r\nExample:\r\n\r\n```js\r\nlet fruit = \"apple\";\r\n\r\nswitch (fruit) {\r\n  case \"banana\":\r\n    console.log(\"Banana is yellow.\");\r\n    break;\r\n  case \"apple\":\r\n    console.log(\"Apple is red.\");\r\n    break;\r\n  default:\r\n    console.log(\"Unknown fruit.\");\r\n}\r\n```\r\n\r\n---\r\n\r\n#### 3.2 Loops\r\n\r\nLoops in JavaScript are used to repeatedly execute a block of code.\r\n\r\n##### for Loop\r\nThe `for` loop is used to repeat a block of code a specific number of times.\r\n\r\n```js\r\nfor (initialization; condition; increment) {\r\n  // Code to execute on each iteration\r\n}\r\n```\r\n\r\nExample:\r\n\r\n```js\r\nfor (let i = 0; i < 5; i++) {\r\n  console.log(i); // Outputs 0, 1, 2, 3, 4\r\n}\r\n```\r\n\r\n##### while Loop\r\nThe `while` loop is used when the number of iterations is unknown, and the loop runs as long as a condition is `true`.\r\n\r\n```js\r\nwhile (condition) {\r\n  // Code to execute while the condition is true\r\n}\r\n```\r\n\r\nExample:\r\n\r\n```js\r\nlet i = 0;\r\n\r\nwhile (i < 5) {\r\n  console.log(i); // Outputs 0, 1, 2, 3, 4\r\n  i++;\r\n}\r\n```\r\n\r\n##### do...while Loop\r\nThe `do...while` loop is similar to the `while` loop, but it ensures that the code block is executed at least once.\r\n\r\n```js\r\ndo {\r\n  // Code to execute\r\n} while (condition);\r\n```\r\n\r\nExample:\r\n\r\n```js\r\nlet i = 0;\r\n\r\ndo {\r\n  console.log(i); // Outputs 0, 1, 2, 3, 4\r\n  i++;\r\n} while (i < 5);\r\n```\r\n\r\n---\r\n\r\n### Conclusion\r\n\r\nJavaScript's syntax, variables, and control structures form the core building blocks of the language. With these fundamentals, you can perform basic operations and control the flow of your program. As you advance, you'll delve into functions, objects, events, and more complex data manipulation.",
      "uploaded_by": 2,
      "created_at": "2024-09-18T16:26:57.562Z",
      "auto_slug": "introduction-to-javascript",
      "topics": [260]
    }
  },
  {
    "model": "main.note",
    "pk": 18,
    "fields": {
      "title": "Operators in Javascript",
      "content": "### 1. **Arithmetic Operators**\r\nUsed for mathematical operations.\r\n\r\n| Operator | Description            | Example                       | Result |\r\n|----------|------------------------|-------------------------------|--------|\r\n| `+`      | Addition                | `5 + 3`                       | `8`    |\r\n| `-`      | Subtraction             | `5 - 3`                       | `2`    |\r\n| `*`      | Multiplication          | `5 * 3`                       | `15`   |\r\n| `/`      | Division                | `5 / 2`                       | `2.5`  |\r\n| `%`      | Modulus (remainder)     | `5 % 2`                       | `1`    |\r\n| `++`     | Increment               | `let x = 5; x++`              | `6`    |\r\n| `--`     | Decrement               | `let x = 5; x--`              | `4`    |\r\n\r\n### Example:\r\n```javascript\r\nlet a = 10;\r\nlet b = 3;\r\nconsole.log(a + b); // Output: 13\r\nconsole.log(a - b); // Output: 7\r\nconsole.log(a * b); // Output: 30\r\nconsole.log(a / b); // Output: 3.3333\r\nconsole.log(a % b); // Output: 1\r\n```\r\n\r\n### 2. **Assignment Operators**\r\nUsed to assign values to variables.\r\n\r\n| Operator | Description                | Example          | Result         |\r\n|----------|----------------------------|------------------|----------------|\r\n| `=`      | Assigns value               | `x = 5`          | `x = 5`        |\r\n| `+=`     | Adds and assigns            | `x += 5`         | `x = x + 5`    |\r\n| `-=`     | Subtracts and assigns       | `x -= 5`         | `x = x - 5`    |\r\n| `*=`     | Multiplies and assigns      | `x *= 5`         | `x = x * 5`    |\r\n| `/=`     | Divides and assigns         | `x /= 5`         | `x = x / 5`    |\r\n| `%=`     | Modulus and assigns         | `x %= 5`         | `x = x % 5`    |\r\n\r\n### Example:\r\n```javascript\r\nlet a = 10;\r\na += 5;  // Now a = 15\r\nconsole.log(a); // Output: 15\r\na *= 2;  // Now a = 30\r\nconsole.log(a); // Output: 30\r\n```\r\n\r\n### 3. **Comparison Operators**\r\nUsed to compare two values, returning a boolean (`true` or `false`).\r\n\r\n| Operator | Description                        | Example         | Result  |\r\n|----------|------------------------------------|-----------------|---------|\r\n| `==`     | Equal to (value)                   | `5 == '5'`      | `true`  |\r\n| `===`    | Strict equal to (value & type)      | `5 === '5'`     | `false` |\r\n| `!=`     | Not equal to (value)               | `5 != '5'`      | `false` |\r\n| `!==`    | Strict not equal to (value & type)  | `5 !== '5'`     | `true`  |\r\n| `>`      | Greater than                       | `5 > 3`         | `true`  |\r\n| `<`      | Less than                          | `5 < 3`         | `false` |\r\n| `>=`     | Greater than or equal to           | `5 >= 3`        | `true`  |\r\n| `<=`     | Less than or equal to              | `5 <= 5`        | `true`  |\r\n\r\n### Example:\r\n```javascript\r\nconsole.log(10 == '10'); // true (value is equal)\r\nconsole.log(10 === '10'); // false (strict comparison)\r\nconsole.log(10 > 5); // true\r\nconsole.log(10 !== '10'); // true (value matches but type does not)\r\n```\r\n\r\n### 4. **Logical Operators**\r\nUsed to perform logical operations between values or expressions.\r\n\r\n| Operator | Description                | Example               | Result |\r\n|----------|----------------------------|-----------------------|--------|\r\n| `&&`     | Logical AND                 | `true && false`       | `false`|\r\n| `||`     | Logical OR                  | `true || false`       | `true` |\r\n| `!`      | Logical NOT                 | `!true`               | `false`|\r\n\r\n### Example:\r\n```javascript\r\nlet a = 10, b = 5;\r\nconsole.log(a > 5 && b < 10); // true\r\nconsole.log(a > 15 || b < 10); // true\r\nconsole.log(!(a > 5)); // false\r\n```\r\n\r\n### 5. **Bitwise Operators**\r\nUsed to perform bit-level operations.\r\n\r\n| Operator | Description                | Example        | Result |\r\n|----------|----------------------------|----------------|--------|\r\n| `&`      | AND                        | `5 & 1`        | `1`    |\r\n| `|`      | OR                         | `5 | 1`        | `5`    |\r\n| `^`      | XOR                        | `5 ^ 1`        | `4`    |\r\n| `~`      | NOT                        | `~5`           | `-6`   |\r\n| `<<`     | Left shift                 | `5 << 1`       | `10`   |\r\n| `>>`     | Right shift                | `5 >> 1`       | `2`    |\r\n\r\n### Example:\r\n```javascript\r\nconsole.log(5 & 1);  // Output: 1\r\nconsole.log(5 | 1);  // Output: 5\r\nconsole.log(5 ^ 1);  // Output: 4\r\nconsole.log(~5);     // Output: -6\r\nconsole.log(5 << 1); // Output: 10\r\nconsole.log(5 >> 1); // Output: 2\r\n```\r\n\r\n### 6. **Ternary (Conditional) Operator**\r\nThis is a shortcut for an `if-else` statement.\r\n\r\n| Operator | Description                          | Example               | Result |\r\n|----------|--------------------------------------|-----------------------|--------|\r\n| `? :`    | Conditional expression (ternary)     | `x > 5 ? 'Yes' : 'No'`| `Yes`  |\r\n\r\n### Example:\r\n```javascript\r\nlet age = 18;\r\nlet canVote = (age >= 18) ? \"Yes\" : \"No\";\r\nconsole.log(canVote); // Output: Yes\r\n```\r\n\r\n### 7. **Type Operators**\r\nUsed to check or manipulate the type of variables.\r\n\r\n| Operator | Description                     | Example               | Result           |\r\n|----------|---------------------------------|-----------------------|------------------|\r\n| `typeof` | Returns the type of a variable   | `typeof 'hello'`      | `\"string\"`       |\r\n| `instanceof` | Checks if an object is an instance of a class | `obj instanceof Array` | `true` (if obj is an array) |\r\n\r\n### Example:\r\n```javascript\r\nconsole.log(typeof 42);         // Output: \"number\"\r\nconsole.log(typeof 'hello');    // Output: \"string\"\r\nconsole.log([1, 2, 3] instanceof Array); // true\r\n```\r\n\r\n### 8. **Spread and Rest Operators**\r\n- **Spread (`...`)**: Expands an array or object into individual elements.\r\n- **Rest (`...`)**: Collects arguments into an array.\r\n\r\n### Example:\r\n```javascript\r\nlet arr = [1, 2, 3];\r\nlet newArr = [...arr, 4, 5];  // Spread\r\nconsole.log(newArr);  // Output: [1, 2, 3, 4, 5]\r\n\r\nfunction sum(...args) {  // Rest\r\n    return args.reduce((total, current) => total + current, 0);\r\n}\r\nconsole.log(sum(1, 2, 3));  // Output: 6\r\n```\r\n\r\n### 9. **Comma Operator**\r\nUsed to evaluate multiple expressions in a single statement, returning the result of the last expression.\r\n\r\n### Example:\r\n```javascript\r\nlet x = (2 + 3, 5 + 1); // First evaluates 2 + 3, then 5 + 1\r\nconsole.log(x); // Output: 6\r\n```\r\n\r\n### 10. **Nullish Coalescing Operator (`??`)**\r\nReturns the right-hand operand if the left-hand operand is `null` or `undefined`.\r\n\r\n### Example:\r\n```javascript\r\nlet name = null;\r\nlet defaultName = name ?? \"Guest\";\r\nconsole.log(defaultName); // Output: \"Guest\"\r\n```",
      "uploaded_by": 2,
      "created_at": "2024-09-18T18:16:15.511Z",
      "auto_slug": "operators-in-javascript",
      "topics": [260]
    }
  },
  {
    "model": "main.question",
    "pk": 2,
    "fields": {
      "title": "Question Set 1",
      "content": "### NumPy and Pandas Questions\r\n\r\n#### **NumPy Questions**\r\n\r\n1. **What is NumPy and why is it used in Python?**\r\n2. **How do you install the NumPy library? Provide the command.**\r\n3. **What is a NumPy array? How does it differ from a Python list?**\r\n4. **How do you create a NumPy array from a Python list?**\r\n5. **How can you create an array filled with zeros or ones in NumPy?**\r\n6. **Explain the difference between `np.zeros()` and `np.empty()`.**\r\n7. **How do you create a 2D array in NumPy? Provide an example.**\r\n8. **What does the `shape` attribute of a NumPy array represent?**\r\n9. **How can you find the number of dimensions of an array in NumPy?**\r\n10. **What is array slicing in NumPy? How is it performed?**\r\n11. **How do you perform element-wise addition and subtraction in NumPy?**\r\n12. **Explain how broadcasting works in NumPy. Provide an example.**\r\n13. **What is the purpose of the `reshape()` method in NumPy?**\r\n14. **How do you find the maximum and minimum values in a NumPy array?**\r\n15. **What is the difference between `np.sum()` and `np.cumsum()`?**\r\n16. **How do you calculate the mean, median, and standard deviation of a NumPy array?**\r\n17. **Explain the use of the `arange()` function in NumPy.**\r\n18. **What is the difference between `linspace()` and `arange()` in NumPy?**\r\n19. **How can you sort a NumPy array?**\r\n20. **Explain how to filter elements from a NumPy array using Boolean indexing.**\r\n21. **What is the purpose of `np.dot()`? How is it different from the `*` operator?**\r\n22. **How do you generate random numbers using NumPy?**\r\n23. **What are the benefits of using vectorized operations in NumPy?**\r\n24. **How can you stack two NumPy arrays vertically and horizontally?**\r\n25. **Explain the concept of NumPy views. How is it different from a copy?**\r\n\r\n#### **Pandas Questions**\r\n\r\n26. **What is Pandas, and why is it important for data analysis?**\r\n27. **How do you install the Pandas library? Provide the command.**\r\n28. **What are the main data structures in Pandas?**\r\n29. **How do you create a DataFrame from a dictionary in Pandas?**\r\n30. **Explain the difference between a DataFrame and a Series in Pandas.**\r\n31. **How do you read a CSV file into a Pandas DataFrame?**\r\n32. **How can you display the first 5 rows of a DataFrame?**\r\n33. **What does the `info()` method do in a Pandas DataFrame?**\r\n34. **How can you select a single column from a DataFrame?**\r\n35. **Explain how to select multiple columns in a DataFrame.**\r\n36. **How do you filter rows in a DataFrame based on a condition?**\r\n37. **What is the purpose of the `loc[]` and `iloc[]` indexers in Pandas?**\r\n38. **How do you add a new column to an existing DataFrame?**\r\n39. **Explain how to delete a column from a DataFrame.**\r\n40. **How can you handle missing data in a DataFrame?**\r\n41. **What is the difference between `dropna()` and `fillna()` in Pandas?**\r\n42. **How do you group data in a DataFrame by one or more columns?**\r\n43. **Explain how to merge two DataFrames in Pandas.**\r\n44. **What is the purpose of the `concat()` function in Pandas?**\r\n45. **How do you apply a function to each element of a DataFrame column?**\r\n46. **Explain how to sort a DataFrame by one or more columns.**\r\n47. **How do you reset the index of a DataFrame?**\r\n48. **What is the purpose of the `pivot_table()` method in Pandas?**\r\n49. **How do you visualize data from a Pandas DataFrame using Matplotlib?**\r\n50. **Explain the concept of a rolling window in Pandas. How is it used?**",
      "added_by": 1,
      "created_at": "2024-09-03T18:15:01.512Z",
      "auto_slug": "question-set-1",
      "topics": [71]
    }
  },
  {
    "model": "main.question",
    "pk": 3,
    "fields": {
      "title": "Question Set 2",
      "content": "# ­ƒº® jQuery Practical Questions\r\n\r\n## ­ƒûï´©Å DOM Manipulation\r\n\r\n1. **Add a New Element**\r\n   - Given a `<div id=\"container\"></div>` in your HTML, write jQuery code to append a new `<p>` element with the text \"Hello World!\" to this `<div>`.\r\n\r\n2. **Change Element Text**\r\n   - Write jQuery code to change the text of an element with the class `.header` to \"Welcome to My Site\".\r\n\r\n3. **Remove Elements**\r\n   - Given a list `<ul id=\"myList\"><li>Item 1</li><li>Item 2</li><li>Item 3</li></ul>`, write jQuery code to remove the second item from the list.\r\n\r\n4. **Add Class to Elements**\r\n   - Write jQuery code to add a class `highlight` to all `<p>` elements on the page.\r\n\r\n5. **Toggle Visibility**\r\n   - Given a `<div id=\"toggleDiv\"></div>`, write jQuery code to toggle its visibility when a button with the id `#toggleButton` is clicked.\r\n\r\n## ­ƒÄ» Event Handling\r\n\r\n6. **Event Handling on Click**\r\n   - Write jQuery code to show an alert with the message \"Button clicked!\" when a button with the id `#alertButton` is clicked.\r\n\r\n7. **Change Input Value**\r\n   - Write jQuery code to change the value of an `<input>` field with the id `#textInput` to \"New Value\" when a button with the id `#changeValueButton` is clicked.\r\n\r\n8. **Hover Effect**\r\n   - Write jQuery code to change the background color of an element with the class `.hoverable` to yellow when the mouse hovers over it, and revert to the original color when the mouse leaves.\r\n\r\n9. **Form Submission**\r\n   - Given a form with the id `#myForm`, write jQuery code to prevent the default form submission and display an alert with the message \"Form submitted!\" when the form is submitted.\r\n\r\n10. **Event Delegation**\r\n    - Write jQuery code to handle clicks on dynamically added `<button>` elements with the class `.dynamicButton` inside a `<div id=\"buttonContainer\">`. Display an alert with the buttonÔÇÖs text when clicked.\r\n\r\n## ­ƒÄ¿ Animations\r\n\r\n11. **Fade In/Out**\r\n    - Write jQuery code to fade in an element with the id `#fadeElement` over 2 seconds when a button with the id `#fadeInButton` is clicked, and fade it out when a button with the id `#fadeOutButton` is clicked.\r\n\r\n12. **Slide Toggle**\r\n    - Write jQuery code to slide toggle a `<div id=\"slideDiv\"></div>` when a button with the id `#slideToggleButton` is clicked.\r\n\r\n13. **Animate CSS Properties**\r\n    - Write jQuery code to animate the width of an element with the id `#animateDiv` from 100px to 500px over 1 second when a button with the id `#animateButton` is clicked.\r\n\r\n14. **Custom Animation**\r\n    - Write jQuery code to create a custom animation that changes the height of an element with the id `#customAnimate` to 200px over 3 seconds, then changes it back to 100px.\r\n\r\n15. **Queue Animation**\r\n    - Write jQuery code to queue multiple animations for an element with the id `#queueElement`, such as fading out, then sliding up, then sliding down, all in sequence when a button with the id `#queueButton` is clicked.\r\n\r\n## ­ƒöì Effects\r\n\r\n16. **Toggle Class**\r\n    - Write jQuery code to toggle a class `active` on an element with the id `#effectElement` when a button with the id `#toggleClassButton` is clicked.\r\n\r\n17. **Hide/Show Elements**\r\n    - Write jQuery code to hide all elements with the class `.hideable` and show them again when a button with the id `#showButton` is clicked.\r\n\r\n18. **Animate Height**\r\n    - Write jQuery code to animate the height of a `<div>` with the id `#animateHeight` from 50px to 150px when a button with the id `#heightButton` is clicked.\r\n\r\n19. **Add Fade Effect to Images**\r\n    - Given a set of images inside a container with the id `#imageContainer`, write jQuery code to add a fade effect to each image when the container is hovered over.\r\n\r\n20. **Fade to Specific Color**\r\n    - Write jQuery code to fade an element with the id `#colorFade` to a specific background color (e.g., `#ff0000`) over 2 seconds when a button with the id `#colorFadeButton` is clicked.",
      "added_by": 2,
      "created_at": "2024-09-10T21:25:59.233Z",
      "auto_slug": "question-set-2",
      "topics": [264]
    }
  },
  {
    "model": "sites.site",
    "pk": 1,
    "fields": { "domain": "localhost", "name": "localhost" }
  },
  {
    "model": "account.emailaddress",
    "pk": 1,
    "fields": {
      "user": 2,
      "email": "siddharthgreat443@gmail.com",
      "verified": true,
      "primary": true
    }
  },
  {
    "model": "account.emailaddress",
    "pk": 2,
    "fields": {
      "user": 3,
      "email": "dalerjatt5911@gmail.com",
      "verified": true,
      "primary": true
    }
  },
  {
    "model": "account.emailaddress",
    "pk": 3,
    "fields": {
      "user": 4,
      "email": "abhishekbisht0203@gmail.com",
      "verified": true,
      "primary": true
    }
  },
  {
    "model": "socialaccount.socialapp",
    "pk": 1,
    "fields": {
      "provider": "google",
      "provider_id": "",
      "name": "Google",
      "client_id": "861062239972-7clbkvk0jcmjiea7jibck6fd8oe1dept.apps.googleusercontent.com",
      "secret": "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",
      "key": "AIzaSyBDDH3KBvfR2nL6aRsTVMNgMOhyYXnxiWk",
      "settings": {},
      "sites": [1]
    }
  },
  {
    "model": "socialaccount.socialapp",
    "pk": 2,
    "fields": {
      "provider": "github",
      "provider_id": "",
      "name": "Github",
      "client_id": "Ov23liCp224tA07vhvDM",
      "secret": "d5c3a2a112c1cee8810d452d83f207b5ffd4d03b",
      "key": "",
      "settings": {},
      "sites": [1]
    }
  },
  {
    "model": "socialaccount.socialaccount",
    "pk": 1,
    "fields": {
      "user": 2,
      "provider": "google",
      "uid": "118403704969253707155",
      "last_login": "2024-09-23T04:32:10.037Z",
      "date_joined": "2024-09-10T19:49:09.336Z",
      "extra_data": {
        "aud": "861062239972-7clbkvk0jcmjiea7jibck6fd8oe1dept.apps.googleusercontent.com",
        "azp": "861062239972-7clbkvk0jcmjiea7jibck6fd8oe1dept.apps.googleusercontent.com",
        "exp": 1727069529,
        "iat": 1727065929,
        "iss": "https://accounts.google.com",
        "sub": "118403704969253707155",
        "name": "Siddharth Tiwari",
        "email": "siddharthgreat443@gmail.com",
        "at_hash": "yWMfG2DXIdLV6mSq0TdxsQ",
        "picture": "https://lh3.googleusercontent.com/a/ACg8ocLMD0Qvyq94BM3z2bdBVTGOjhsumLFizlp-il9SSKeESvrE-GJtnw=s96-c",
        "given_name": "Siddharth",
        "family_name": "Tiwari",
        "email_verified": true
      }
    }
  },
  {
    "model": "socialaccount.socialaccount",
    "pk": 2,
    "fields": {
      "user": 3,
      "provider": "google",
      "uid": "103478614572017864834",
      "last_login": "2024-09-11T12:19:19.469Z",
      "date_joined": "2024-09-11T12:19:19.469Z",
      "extra_data": {
        "aud": "861062239972-7clbkvk0jcmjiea7jibck6fd8oe1dept.apps.googleusercontent.com",
        "azp": "861062239972-7clbkvk0jcmjiea7jibck6fd8oe1dept.apps.googleusercontent.com",
        "exp": 1726060757,
        "iat": 1726057157,
        "iss": "https://accounts.google.com",
        "sub": "103478614572017864834",
        "name": "daler jatt",
        "email": "dalerjatt5911@gmail.com",
        "at_hash": "pVZ9BNcICvhn-_bLQGX-bA",
        "picture": "https://lh3.googleusercontent.com/a/ACg8ocKHsylCWmxGR8XkeLRG4GuhmnLwaU9bhhRreHa29p6uI3O-s7gJ=s96-c",
        "given_name": "daler",
        "family_name": "jatt",
        "email_verified": true
      }
    }
  },
  {
    "model": "socialaccount.socialaccount",
    "pk": 3,
    "fields": {
      "user": 4,
      "provider": "google",
      "uid": "101932365405167891216",
      "last_login": "2024-09-23T13:38:04.372Z",
      "date_joined": "2024-09-23T13:38:04.372Z",
      "extra_data": {
        "aud": "861062239972-7clbkvk0jcmjiea7jibck6fd8oe1dept.apps.googleusercontent.com",
        "azp": "861062239972-7clbkvk0jcmjiea7jibck6fd8oe1dept.apps.googleusercontent.com",
        "exp": 1727102282,
        "iat": 1727098682,
        "iss": "https://accounts.google.com",
        "sub": "101932365405167891216",
        "name": "Abhishek Bisht",
        "email": "abhishekbisht0203@gmail.com",
        "at_hash": "jN6n3GrR6csckEeeAPniBw",
        "picture": "https://lh3.googleusercontent.com/a/ACg8ocIDlhgie2jQ29GKXRgQKnaTDn7sEcmUupFy5xLXWNRWN2OMxpA=s96-c",
        "given_name": "Abhishek",
        "family_name": "Bisht",
        "email_verified": true
      }
    }
  }
]
